<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vitor Britto</title>
    <description>Desenvolvedor Web</description>
    <link>http://www.vitorbritto.com.br/blog</link>
    <atom:link href="http://www.vitorbritto.com.br/blog/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Novos posts com estilo</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Gostaria de compartilhar uma dica interessante para os usuários do &lt;em&gt;Static Generator&lt;/em&gt; Jekyll, que, apesar de ser uma excelente ferramenta, me deixou na mão em um ponto: criar novos posts. &lt;/p&gt;

              &lt;h2 id=&quot;O-problema&quot;&gt;
                &lt;a name=&quot;O-problema&quot; href=&quot;#O-problema&quot;&gt;&lt;/a&gt;O problema
              &lt;/h2&gt;
            
&lt;p&gt;Mesmo com a facilidade da sintaxe do YAML (front matter) e o Markdown para escrever os meus artigos, senti falta de uma tarefa/comando/utilitário para automatizar o processo de criação de um modelo inicial para os meus posts.&lt;/p&gt;

&lt;p&gt;Sabendo-se que passo a maior parte do tempo no terminal/console/shell e, até onde sei, não é possível criar um template via CLI para um novo post com o Jekyll, resolvi facilitar este processo desenvolvendo um programa em Shell para gerar um template de acordo com as minhas necessidades.&lt;/p&gt;

              &lt;h2 id=&quot;A-solução&quot;&gt;
                &lt;a name=&quot;A-solução&quot; href=&quot;#A-solução&quot;&gt;&lt;/a&gt;A solução
              &lt;/h2&gt;
            
&lt;p&gt;O primeiro passo foi montar a estrutura do script responsável por está automação, colocando um cabeçalho e uma opção para &lt;code&gt;--help&lt;/code&gt;. A boa prática em documentar o seu programa, facilita a sua manutenção. Não somente, o seu programa fica muito mais organizado e elegante.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;```
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;#!/usr/bin/env bash
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;# Program: initpost.sh
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;# Author:  Vitor Britto
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;# Description: script to create an initial structure for my posts.
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;# Usage: ./initpost.sh [options] &amp;lt;post name&amp;gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;# Options:
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;#   -h, --help        output instructions
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;#   -c, --create      create post
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;# Alias: alias ipost=&amp;quot;bash ~/path/to/script/initpost.sh&amp;quot;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;# Example:
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;#   ./initpost.sh -c How to replace strings with sed
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;# Important Notes:
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;#   - This script was created to generate new markdown files for my blog.
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;#
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-25&quot;&gt;&lt;/a&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Lembre-se sempre de incluir o &lt;em&gt;shebang&lt;/em&gt; na primeira linha do programa para torná-lo executável. Se quiser saber mais sobre isto, &lt;a href=&quot;http://www.vitorbritto.com.br/blog/criando-bons-programas-em-shell-script/&quot;&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Além disso, é deverás importante viabilizar uma opção para ajudar o usuário na jornada pela ferramenta. Mesmo que este usuário seja você.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;```
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;# Everybody need some help
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;initpost_help() {
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;cat &amp;lt;&amp;lt;EOT
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------------
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;INIT POST - A shortcut to create an initial structure for my posts.
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------------
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;Usage: ./initpost.sh [options] &amp;lt;post name&amp;gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;Options:
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;  -h, --help        output instructions
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;  -c, --create      create post
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;Example:
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;  ./initpost.sh -c How to replace strings with sed
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;Important Notes:
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;  - This script was created to generate new text files to my blog.
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;Copyright (c) Vitor Britto
&lt;a name=&quot;line-25&quot;&gt;&lt;/a&gt;Licensed under the MIT license.
&lt;a name=&quot;line-26&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-27&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------------
&lt;a name=&quot;line-28&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-29&quot;&gt;&lt;/a&gt;EOT
&lt;a name=&quot;line-30&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-31&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-32&quot;&gt;&lt;/a&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O segundo passo foi desenvolver funções utilitárias para determinados comportamentos deste programa. Neste caso, temos funções para criar &lt;em&gt;logs&lt;/em&gt; e renderizar na tela algumas mensagens.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;```
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;# | UTILS                                                                      |
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;# Header logging
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;e_header() {
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    printf &amp;quot;$(tput setaf 38)→ %s$(tput sgr0)\n&amp;quot; &amp;quot;$@&amp;quot;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;# Success logging
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;e_success() {
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;    printf &amp;quot;$(tput setaf 76)✔ %s$(tput sgr0)\n&amp;quot; &amp;quot;$@&amp;quot;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;# Error logging
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;e_error() {
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;    printf &amp;quot;$(tput setaf 1)✖ %s$(tput sgr0)\n&amp;quot; &amp;quot;$@&amp;quot;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;# Warning logging
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;e_warning() {
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;    printf &amp;quot;$(tput setaf 3)! %s$(tput sgr0)\n&amp;quot; &amp;quot;$@&amp;quot;
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-25&quot;&gt;&lt;/a&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Perceba que os dois passos anteriores podem ser reutilizáveis em outros programas Shell.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No próximo e terceiro passo, defini as variáveis e &amp;quot;constantes&amp;quot; deste programa. Ambas são escritas em &lt;em&gt;uppercase&lt;/em&gt;, a não ser quando crio variáveis locais (no escopo de uma função) que, por sua vez, são escritas em &lt;em&gt;lowercase&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fica à seu critério, como definir suas variáveis. Me sinto confortável desta maneira. Combinado?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;```
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;# | VARIABLES                                                                  |
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;# CORE: Do not change these lines
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;# ----------------------------------------------------------------
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;POST_TITLE=&amp;quot;${@:2:$(($#-1))}&amp;quot;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;POST_NAME=&amp;quot;$(echo ${@:2:$(($#-1))} | sed -e &amp;#39;s/ /-/g&amp;#39; | sed &amp;quot;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/&amp;quot;)&amp;quot;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;CURRENT_DATE=&amp;quot;$(date +&amp;#39;%Y-%m-%d&amp;#39;)&amp;quot;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;FILE_NAME=&amp;quot;${CURRENT_DATE}-${POST_NAME}.md&amp;quot;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;# ----------------------------------------------------------------
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;# SETTINGS: your configuration goes here
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;# ----------------------------------------------------------------
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;# Set your destination folder
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;DIST_FOLDER=&amp;quot;$HOME/Dropbox/DOCUMENTOS/Articles/&amp;quot;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;# Set your blog URL
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;BLOG_URL=&amp;quot;http://vitorbritto.com/blog&amp;quot;
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;# Set your assets URL
&lt;a name=&quot;line-25&quot;&gt;&lt;/a&gt;ASSETS_URL=&amp;quot;assets/images/posts&amp;quot;
&lt;a name=&quot;line-26&quot;&gt;&lt;/a&gt;# ----------------------------------------------------------------
&lt;a name=&quot;line-27&quot;&gt;&lt;/a&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nesta parte, separei as &amp;quot;constantes&amp;quot; das variáveis por &lt;strong&gt;CORE&lt;/strong&gt; e &lt;strong&gt;SETTINGS&lt;/strong&gt;. Veja como a documentação de cada elemento ajuda na identificação do que pode ser alterado ou não.&lt;/p&gt;

&lt;p&gt;No quarto passo, dei início ao desenvolvimento das &lt;em&gt;main functions&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;```
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;# Initial Content
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;initpost_content() {
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;echo &amp;quot;---&amp;quot;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;echo &amp;quot;layout: post&amp;quot;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;echo &amp;quot;title: \&amp;quot;${POST_TITLE}\&amp;quot;&amp;quot;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;echo &amp;quot;link: \&amp;quot;${BLOG_URL}/${POST_NAME}/\&amp;quot;&amp;quot;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;echo &amp;quot;date: ${CURRENT_DATE}&amp;quot;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;echo &amp;quot;cover: \&amp;quot;${ASSETS_URL}/post-${POST_NAME}.jpg\&amp;quot;&amp;quot;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;echo &amp;quot;path: \&amp;quot;${FILE_NAME}\&amp;quot;&amp;quot;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;echo &amp;quot;description:&amp;quot;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;echo &amp;quot;comments: true&amp;quot;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;echo &amp;quot;bio: Desenvolvedor Web e Designer, extremamente apaixonado pelo seu trabalho. Descobriu o mundo dos códigos há quase duas décadas e mantém a mesma paixão desde o primeiro dia dessa descoberta. Trabalha como freelancer full time há quase 4 anos desenvolvendo projetos voltados para a web. Também direciona boa parte do seu tempo para pesquisas, projetos colaborativos, desenvolvimento de projetos pessoais e escrever os artigos aqui publicados.&amp;quot;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;echo &amp;quot;---&amp;quot;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;# Create file
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;initpost_file() {
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;    if [ ! -f &amp;quot;$FILE_NAME&amp;quot; ]; then
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;        e_header &amp;quot;Creating template...&amp;quot;
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;        initpost_content &amp;gt; &amp;quot;${DIST_FOLDER}/${FILE_NAME}&amp;quot;
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;        e_success &amp;quot;Initial post successfully created!&amp;quot;
&lt;a name=&quot;line-25&quot;&gt;&lt;/a&gt;    else
&lt;a name=&quot;line-26&quot;&gt;&lt;/a&gt;        e_warning &amp;quot;File already exist.&amp;quot;
&lt;a name=&quot;line-27&quot;&gt;&lt;/a&gt;        exit 1
&lt;a name=&quot;line-28&quot;&gt;&lt;/a&gt;    fi
&lt;a name=&quot;line-29&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-30&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-31&quot;&gt;&lt;/a&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se você se sentiu incomodado com a quantidade de &lt;em&gt;echo&lt;/em&gt; na função &lt;code&gt;initpost_content()&lt;/code&gt;, saiba que podemos utilizar o o comando/utilitário &lt;code&gt;cat&lt;/code&gt; (informações em &lt;code&gt;man cat&lt;/code&gt;), gravar estas informações em um arquivo de texto externo ou a solução que você achar mais conveniente.&lt;/p&gt;

&lt;p&gt;Por fim, criei uma função responsável pela inicialização do programa com a respectiva &lt;code&gt;flag&lt;/code&gt;(--help|-h &lt;em&gt;ou&lt;/em&gt; --create|-c).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;```
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;# | INITIALIZE PROGRAM                                                         |
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;# ------------------------------------------------------------------------------
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;main() {
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    # Show help
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;    if [[ &amp;quot;${1}&amp;quot; == &amp;quot;-h&amp;quot; || &amp;quot;${1}&amp;quot; == &amp;quot;--help&amp;quot; ]]; then
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;        initpost_help ${1}
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;        exit
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;    fi
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;    # Create
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;    if [[ &amp;quot;${1}&amp;quot; == &amp;quot;-c&amp;quot; || &amp;quot;${1}&amp;quot; == &amp;quot;--create&amp;quot; ]]; then
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;        initpost_file $*
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;        exit
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;    fi
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;}
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;# Initialize
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;main $*
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;O programa completo encontra-se &lt;a href=&quot;https://github.com/vitorbritto/forcefiles/blob/master/scripts/initpost.sh&quot;&gt;aqui&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O script é configurável e espero que seja útil para você. &lt;/p&gt;

&lt;p&gt;Até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/novos-posts-com-estilo/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/novos-posts-com-estilo/</guid>
      </item>
    
      <item>
        <title>Novidades no Blog</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Vamos iniciar o ano com novidades no Blog. Duas novas categorias serão iniciadas, são elas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Labs&lt;/li&gt;
&lt;li&gt;Tips&lt;/li&gt;
&lt;/ol&gt;

              &lt;h2 id=&quot;Se-aventurar-é-bom&quot;&gt;
                &lt;a name=&quot;Se-aventurar-é-bom&quot; href=&quot;#Se-aventurar-é-bom&quot;&gt;&lt;/a&gt;Se aventurar é bom
              &lt;/h2&gt;
            
&lt;p&gt;No espaço &lt;strong&gt;LABS&lt;/strong&gt;, teremos algumas aventuras das linguagens de programação que me identifiquei durante o ano de 2014 e que tenho vontade em realizar experimentos, desenvolver projetos open-source e, quem sabe, incluir nos meus projetos do dia-a-dia (meio comercial). &lt;/p&gt;

&lt;p&gt;Sim, é verdade! Não mencionei as linguagens. Aí vai:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Erlang / Elixir&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;Elm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Devo salientar que são linguagens que possuem o paradigma funcional e está é uma das minhas metas para 2015: estudar muita programação funcional!&lt;/p&gt;

              &lt;h2 id=&quot;Por-um-ambiente-de-trabalho-melhor&quot;&gt;
                &lt;a name=&quot;Por-um-ambiente-de-trabalho-melhor&quot; href=&quot;#Por-um-ambiente-de-trabalho-melhor&quot;&gt;&lt;/a&gt;Por um ambiente de trabalho melhor
              &lt;/h2&gt;
            
&lt;p&gt;Já na categoria &lt;strong&gt;TIPS&lt;/strong&gt;, teremos dicas sobre produtividade, agilidade, eficiência, dentre outros aspectos e experiências que obtive durante esta longa estrada que percorri até o momento. Se você faz parte do meu círculo social no Twitter ou Facebook, já deve ter visto algumas dicas que repasso por lá.&lt;/p&gt;

&lt;p&gt;Espero que vocês gostem das boas novas! &lt;/p&gt;

&lt;p&gt;Até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/novidades-no-blog/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/novidades-no-blog/</guid>
      </item>
    
      <item>
        <title>Examinando sua aplicação</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Na minha rotina de trabalho, examinar/analisar o código é via de regra para evitar que meus cabelos fiquem brancos muito cedo. Procuro realizar depurações, inspeções e testes para deixar a aplicação o mais consistente possível. Isso reduz drasticamente a possibilidade que erros bobos aconteçam.&lt;/p&gt;

&lt;p&gt;Pois bem! Um método prático para depurar o seu código, é utilizando o objeto &lt;code&gt;console&lt;/code&gt;. Este objeto não faz parte do JavaScript, e sim das engines dos browsers (Firefox, Chrome, Safari e IE). São encontrados, especificamente, nas ferramentas de &lt;em&gt;debug&lt;/em&gt; (DevTools, Web Console e Firebug).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE:&lt;/strong&gt; os testes foram realizados no &lt;strong&gt;Firefox&lt;/strong&gt; e &lt;strong&gt;Firebug&lt;/strong&gt;. Alguns métodos podem não estar presentes nos cenários ilustrados abaixo! De qualquer forma, colocarei uma lista com os métodos existentes. Ok? =]&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h2 id=&quot;Quais-as-minhas-opções-para-o-debug-&quot;&gt;
                &lt;a name=&quot;Quais-as-minhas-opções-para-o-debug-&quot; href=&quot;#Quais-as-minhas-opções-para-o-debug-&quot;&gt;&lt;/a&gt;Quais as minhas opções para o debug?
              &lt;/h2&gt;
            
&lt;p&gt;A API do objeto &lt;code&gt;console&lt;/code&gt; possui diversos métodos. Entender quando e como utilizá-los, pode poupar tempo e auxiliar na depuração do seu codigo.&lt;/p&gt;

&lt;p&gt;Vamos conferir quais são estes métodos e para o que eles servem.&lt;/p&gt;

              &lt;h3 id=&quot;Lista-geral-de-métodos&quot;&gt;
                &lt;a name=&quot;Lista-geral-de-métodos&quot; href=&quot;#Lista-geral-de-métodos&quot;&gt;&lt;/a&gt;Lista geral de métodos
              &lt;/h3&gt;
            
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.assert&quot;&gt;console.assert()&lt;/a&gt;: verifica se uma expressão possui o valor &lt;em&gt;true&lt;/em&gt;. Caso seja &lt;em&gt;false&lt;/em&gt;, uma mensagem será renderizada no console juntamente com uma exceção (exception);&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.clear&quot;&gt;console.clear()&lt;/a&gt;: limpa o console;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.count&quot;&gt;console.count()&lt;/a&gt;: exibe no console quantas vezes determinada &lt;code&gt;label&lt;/code&gt; foi executada no código;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.debug&quot;&gt;console.debug()&lt;/a&gt;: realiza a mesma ação do método &lt;code&gt;console.log()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.dir&quot;&gt;console.dir()&lt;/a&gt;: exibe uma lista interativa das propriedades de um determinado objeto;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.dirxml&quot;&gt;console.dirxml()&lt;/a&gt;: exibe uma estrutura de um nó (node) HTML ou XML;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.exception&quot;&gt;console.exception()&lt;/a&gt;: um atalho para &lt;code&gt;console.error()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.group&quot;&gt;console.group()&lt;/a&gt;: inicia o agrupamento de determinadas mensagens a serem exebidas no console;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.groupCollapsed&quot;&gt;console.groupCollapsed()&lt;/a&gt;: semelhante ao &lt;code&gt;console.group()&lt;/code&gt;, porém as informações estarão ocultas inicialmente;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.groupEnd&quot;&gt;console.groupEnd()&lt;/a&gt;: encerra o agrupamento de determinadas mensagens a serem exibidas no console;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.log&quot;&gt;console.log()&lt;/a&gt;: exibe uma mensagem no console;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.error&quot;&gt;console.error()&lt;/a&gt;: exibe uma mensagem (de erro) no console com características próprias do método;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.warn&quot;&gt;console.warn()&lt;/a&gt;: exibe uma mensagem (de alerta) no console com características próprias do método;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.info&quot;&gt;console.info()&lt;/a&gt;: exibe uma mensagem (de informação) no console com características próprias do método;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;console.markTimeline()&lt;/a&gt;: o mesmo que &lt;code&gt;console.timeStamp()&lt;/code&gt; e disponível somente no Safari;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.profile&quot;&gt;console.profile()&lt;/a&gt;: inicia o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Profiler&quot;&gt;JavaScript profiler&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.profileEnd&quot;&gt;console.profileEnd()&lt;/a&gt;: interrompe o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Profiler&quot;&gt;JavaScript profiler&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.table&quot;&gt;console.table()&lt;/a&gt;: renderiza no console os dados em formato de tabela;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.time&quot;&gt;console.time()&lt;/a&gt;: inicia um contador para uma ação a ser executada. Deve ser utilizado juntamente com &lt;code&gt;console.timeEnd()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.timeEnd&quot;&gt;console.timeEnd()&lt;/a&gt;: interrompe o contador especificado anteriormente em &lt;code&gt;console.time()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.timeStamp&quot;&gt;console.timeStamp()&lt;/a&gt;: pode ser utilizado para analisar o tempo de execução no tráfego de dados;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console.trace&quot;&gt;console.trace()&lt;/a&gt;: renderiza o caminho percorrido, tomando como ponto inicial o local onde este método for colocado.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTA 1:&lt;/strong&gt; o uso mais frequente do objeto &lt;code&gt;console&lt;/code&gt; é para renderizar log e outros dados. Existem 4 métodos possíveis para dar saída a estes &lt;code&gt;logs&lt;/code&gt;, são eles: &lt;code&gt;console.log()&lt;/code&gt;, &lt;code&gt;console.info()&lt;/code&gt;, &lt;code&gt;console.warn()&lt;/code&gt; e &lt;code&gt;console.error()&lt;/code&gt;. Cada um destes métodos possui um estilo diferenciado e você pode utilizar controles de filtros provenientes no seu browser para exibir apenas os que interessam em determinada situação na sua depuração.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTA 2:&lt;/strong&gt; nem todos os métodos foram utilizados nos exemplos deste artigo. Para mais informações, clique no &lt;em&gt;link&lt;/em&gt; do respectivo método na lista acima.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h2 id=&quot;Ampliando-o-uso-do-console&quot;&gt;
                &lt;a name=&quot;Ampliando-o-uso-do-console&quot; href=&quot;#Ampliando-o-uso-do-console&quot;&gt;&lt;/a&gt;Ampliando o uso do console
              &lt;/h2&gt;
            
&lt;p&gt;Me permita apresentar algumas funcionalidades interessantes e que podem ser úteis para sua depuração.&lt;/p&gt;

              &lt;h3 id=&quot;O-método-&lt;code&gt;console-clear-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;O-método-&lt;code&gt;console-clear-&lt;-code&gt;&quot; href=&quot;#O-método-&lt;code&gt;console-clear-&lt;-code&gt;&quot;&gt;&lt;/a&gt;O método &lt;code&gt;console.clear()&lt;/code&gt;
              &lt;/h3&gt;
            
&lt;p&gt;Utilize este método para limpar o console quando necessário. Você possui duas opções:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;digitando no seu console &lt;code&gt;clear()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;ou utilizando os atalhos &lt;code&gt;cmd+K&lt;/code&gt; ou &lt;code&gt;ctrl+L&lt;/code&gt; (Mac), &lt;code&gt;ctrl+L&lt;/code&gt; (Windows and Linux).&lt;/li&gt;
&lt;/ul&gt;

              &lt;h3 id=&quot;Utilizar-diretivas-na-substituição-de-&lt;em&gt;strings&lt;-em&gt;&quot;&gt;
                &lt;a name=&quot;Utilizar-diretivas-na-substituição-de-&lt;em&gt;strings&lt;-em&gt;&quot; href=&quot;#Utilizar-diretivas-na-substituição-de-&lt;em&gt;strings&lt;-em&gt;&quot;&gt;&lt;/a&gt;Utilizar diretivas na substituição de &lt;em&gt;strings&lt;/em&gt;
              &lt;/h3&gt;
            
&lt;p&gt;Para quem programa na linguagem C ou utiliza o NodeJS, esta &lt;em&gt;feature&lt;/em&gt; lhe será familiar. Você pode interpolar uma &lt;em&gt;string&lt;/em&gt; com um tipo de saída e passar as suas respectivas referências para uma expressão.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;console.log(&amp;#39;Meu nome é %s e tenho %d anos!&amp;#39;, &amp;#39;Vitor Britto&amp;#39;, 34);
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Meu nome é Vitor Britto e tenho 34 anos!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confira abaixo uma tabela com os tipos de saída disponíveis:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tipo de saída&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;Renderiza um link.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d ou %i&lt;/td&gt;
&lt;td&gt;Renderiza um número inteiro.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;Renderiza uma &lt;em&gt;string&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;Renderiza um número real (float).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

              &lt;h3 id=&quot;Formatar-o-output-com-CSS&quot;&gt;
                &lt;a name=&quot;Formatar-o-output-com-CSS&quot; href=&quot;#Formatar-o-output-com-CSS&quot;&gt;&lt;/a&gt;Formatar o output com CSS
              &lt;/h3&gt;
            
&lt;p&gt;É possível utilizar o tipo de saída &lt;code&gt;%c&lt;/code&gt; para formatar a escrita no método &lt;code&gt;console.log()&lt;/code&gt; com CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;// Simulando uma mensagem de erro
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;console.log(&amp;quot;%cError Message!&amp;quot;, &amp;quot;color: red; font-style: italic&amp;quot;);
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;// Simulando uma mensagem de alerta
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;console.log(&amp;quot;%cWarning Message!&amp;quot;, &amp;quot;color: yellow; font-style: italic&amp;quot;);
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;// Simulando uma mensagem de sucesso
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;console.log(&amp;quot;%cSuccess Message!&amp;quot;, &amp;quot;color: lime; font-style: italic&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h3 id=&quot;Legendas-para-alguns-métodos&quot;&gt;
                &lt;a name=&quot;Legendas-para-alguns-métodos&quot; href=&quot;#Legendas-para-alguns-métodos&quot;&gt;&lt;/a&gt;Legendas para alguns métodos
              &lt;/h3&gt;
            
&lt;p&gt;Utilizaremos as seguintes legendas para demonstrar os ícones renderizados no console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log()&lt;/code&gt;: (sem ícone)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.info()&lt;/code&gt;: (i)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.warn()&lt;/code&gt;: /i\&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.error()&lt;/code&gt;: [x]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pronto? Então vamos em frente.&lt;/p&gt;

              &lt;h2 id=&quot;Mergulhando-neste-mar-de-possibilidades&quot;&gt;
                &lt;a name=&quot;Mergulhando-neste-mar-de-possibilidades&quot; href=&quot;#Mergulhando-neste-mar-de-possibilidades&quot;&gt;&lt;/a&gt;Mergulhando neste mar de possibilidades
              &lt;/h2&gt;
            
&lt;p&gt;Bom, agora que você possui um &lt;em&gt;overview&lt;/em&gt; do objeto &lt;code&gt;console&lt;/code&gt; e de algumas &lt;em&gt;features&lt;/em&gt; interessantes, vamos mergulhar um pouco mais fundo para entender em quais situações podemos utilizar os métodos existentes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE:&lt;/strong&gt; os cenários abaixo são ilustrativos e cabe a você decidir quando e como utilizar cada método para o &lt;em&gt;debug&lt;/em&gt; dos seus scripts.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h3 id=&quot;Para-renderizar-informações&quot;&gt;
                &lt;a name=&quot;Para-renderizar-informações&quot; href=&quot;#Para-renderizar-informações&quot;&gt;&lt;/a&gt;Para renderizar informações
              &lt;/h3&gt;
            
              &lt;h5 id=&quot;&lt;code&gt;console-log-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-log-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-log-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.log()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja saber se determinado evento foi executado com sucesso.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ready to go...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;Ready to go...&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h5 id=&quot;&lt;code&gt;console-error-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-error-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-error-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.error()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você quer exibir uma mensagem de erro no console caso não seja passado um objeto &lt;code&gt;number&lt;/code&gt; como argumento em uma função imediata (IIFE - Immediately-Invoked Function Expression).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;number&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;TypeError&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The argument must be a number&amp;#39;&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;seven&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; [x] &amp;quot;TypeError: The argument must be a number&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h5 id=&quot;&lt;code&gt;console-info-&lt;-code&gt;-e-&lt;code&gt;console-warn-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-info-&lt;-code&gt;-e-&lt;code&gt;console-warn-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-info-&lt;-code&gt;-e-&lt;code&gt;console-warn-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.info()&lt;/code&gt; e &lt;code&gt;console.warn()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja depurar uma requisição HTTP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Sending request…&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Server Error! Timeout!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Error on connection!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para ilustrar as 3 possibilidades decorrentes deste script, vamos utilizar os métodos &lt;code&gt;console.info()&lt;/code&gt;, &lt;code&gt;console.log()&lt;/code&gt;, &lt;code&gt;console.error()&lt;/code&gt; e &lt;code&gt;console.warn()&lt;/code&gt; para emitir cada estado desta requisição.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na primeira tentativa, efetuamos a requisição com sucesso;&lt;/li&gt;
&lt;li&gt;Na segunda tentativa, a comunicação foi interrompida por conta de um &lt;code&gt;timeout&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Na terceira tentativa, não foi possível estabelecer uma comunicação com o servidor;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Confira abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; XHRget(&amp;#39;http://www.vitorbritto.com.br/blog/&amp;#39;);
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; (i) &amp;quot;Sending request…&amp;quot;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;Success!&amp;quot;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; XHRget(&amp;#39;http://www.vitorbritto.com.br/foo/&amp;#39;);
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; (i) &amp;quot;Sending request…&amp;quot;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; /x\ &amp;quot;Server Error! Timeout!&amp;quot;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; XHRget(&amp;#39;http://www.vitorbritto.com.br/blog/&amp;#39;);
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; (i) &amp;quot;Sending request…&amp;quot;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; [x] &amp;quot;Error on connection!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h3 id=&quot;Para-extender-as-inspeções&quot;&gt;
                &lt;a name=&quot;Para-extender-as-inspeções&quot; href=&quot;#Para-extender-as-inspeções&quot;&gt;&lt;/a&gt;Para extender as inspeções
              &lt;/h3&gt;
            
              &lt;h5 id=&quot;&lt;code&gt;console-assert-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-assert-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-assert-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.assert()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja verificar se o argumento passado em uma função é do tipo &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Not a String!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;555&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; [x] &amp;quot;Not a String!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h5 id=&quot;&lt;code&gt;console-count-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-count-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-count-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.count()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja examinar quantas vezes o método &lt;code&gt;console.log()&lt;/code&gt; foi executado no seu script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ceil&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;floor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;trim&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^\s+|\s+$/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;   Vitor Britto   &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;console: 1&amp;quot;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; -3
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;console: 2&amp;quot;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; -6
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;console: 3&amp;quot;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;Vitor Britto&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h3 id=&quot;Para-organizar-os-resultados&quot;&gt;
                &lt;a name=&quot;Para-organizar-os-resultados&quot; href=&quot;#Para-organizar-os-resultados&quot;&gt;&lt;/a&gt;Para organizar os resultados
              &lt;/h3&gt;
            
              &lt;h5 id=&quot;&lt;code&gt;console-trace-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-trace-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-trace-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.trace()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja verificar o caminho percorrido na execução de um trecho do seu código.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;console.trace():
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;baz()                 debugger eval code:6
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;bar()                 debugger eval code:8
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;foo()                 debugger eval code:10
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&amp;lt;anonymous&amp;gt;           debugger eval code:12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h5 id=&quot;&lt;code&gt;console-dir-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-dir-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-dir-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.dir()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja visualizar a estrutura de um determinado objeto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;influences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Self&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Scheme&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Java&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Brendan Eich&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1995&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;influences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ALGOL 68&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;PL/I&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Dennis Ritchie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1972&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; {influences: Array[3], developer: &amp;quot;Brendan Eich&amp;quot;, created: 1995}
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;created: 1995
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;developer: &amp;quot;Brendan Eich&amp;quot;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;influences: Array[3]
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;0: &amp;quot;Self&amp;quot;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;1: &amp;quot;Scheme&amp;quot;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;2: &amp;quot;Java&amp;quot;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;length: 3
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;__proto__: Object
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; {influences: Array[3], developer: &amp;quot;Dennis Ritchie&amp;quot;, created: 1972}
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;created: 1972
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;developer: &amp;quot;Dennis Ritchie&amp;quot;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;influences: Array[3]
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;0: &amp;quot;B&amp;quot;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;1: &amp;quot;ALGOL 68&amp;quot;
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;2: &amp;quot;PL/I&amp;quot;
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;length: 3
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;__proto__: Object
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h5 id=&quot;&lt;code&gt;console-group-&lt;-code&gt;-&lt;code&gt;console-groupCollapsed-&lt;-code&gt;-e-&lt;code&gt;console-groupEnd-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-group-&lt;-code&gt;-&lt;code&gt;console-groupCollapsed-&lt;-code&gt;-e-&lt;code&gt;console-groupEnd-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-group-&lt;-code&gt;-&lt;code&gt;console-groupCollapsed-&lt;-code&gt;-e-&lt;code&gt;console-groupEnd-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.group()&lt;/code&gt;, &lt;code&gt;console.groupCollapsed()&lt;/code&gt; e &lt;code&gt;console.groupEnd()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja agrupar determinadas mensagens a serem renderizadas no console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Group of log messages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%cError Message!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;color: red; font-style: italic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%cWarning Message!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;color: yellow; font-style: italic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%cSuccess Message!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;color: lime; font-style: italic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;groupEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Group of log messages
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;   &amp;quot;Error Message!&amp;quot;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;   &amp;quot;Warning Message!&amp;quot;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;   &amp;quot;Success Message!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h5 id=&quot;&lt;code&gt;console-table-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-table-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-table-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.table()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja visualizar a estrutura de um objeto ou array literal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tools&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar baz&amp;#39;&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; -----
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; 0 | 1
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; -----
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; 1 | 2
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; 3 | 4
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; 5 | 6
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; -----
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; ----------------------------------
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Object Properties       Values
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; ----------------------------------
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;name&amp;quot;                  &amp;quot;foo&amp;quot;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;ext&amp;quot;                   &amp;quot;.foo&amp;quot;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; &amp;quot;usage&amp;quot;                 &amp;quot;bar baz&amp;quot;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; ----------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h3 id=&quot;Para-analisar-os-resultados&quot;&gt;
                &lt;a name=&quot;Para-analisar-os-resultados&quot; href=&quot;#Para-analisar-os-resultados&quot;&gt;&lt;/a&gt;Para analisar os resultados
              &lt;/h3&gt;
            
              &lt;h5 id=&quot;&lt;code&gt;console-profile-&lt;-code&gt;-e-&lt;code&gt;console-profileEnd-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-profile-&lt;-code&gt;-e-&lt;code&gt;console-profileEnd-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-profile-&lt;-code&gt;-e-&lt;code&gt;console-profileEnd-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.profile()&lt;/code&gt; e &lt;code&gt;console.profileEnd()&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja realizar comparativos de performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;getElementById() vs. querySelector()&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;profileEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; confira mais detalhes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Profiler&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

              &lt;h5 id=&quot;&lt;code&gt;console-time-&lt;-code&gt;-e-&lt;code&gt;console-timeEnd-&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;&lt;code&gt;console-time-&lt;-code&gt;-e-&lt;code&gt;console-timeEnd-&lt;-code&gt;&quot; href=&quot;#&lt;code&gt;console-time-&lt;-code&gt;-e-&lt;code&gt;console-timeEnd-&lt;-code&gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;console.time();&lt;/code&gt; e &lt;code&gt;console.timeEnd();&lt;/code&gt;
              &lt;/h5&gt;
            
&lt;p&gt;&lt;strong&gt;Cenário:&lt;/strong&gt; você deseja analisar/redenrizar o tempo de execução para um determinado bloco de código no seu script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Iterate Array&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Iterate Array&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Iterate Array: timer started
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Iterate Array: 0.08ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h2 id=&quot;Não-deixe-a-depuração-e-inspeção-de-lado&quot;&gt;
                &lt;a name=&quot;Não-deixe-a-depuração-e-inspeção-de-lado&quot; href=&quot;#Não-deixe-a-depuração-e-inspeção-de-lado&quot;&gt;&lt;/a&gt;Não deixe a depuração e inspeção de lado
              &lt;/h2&gt;
            
&lt;p&gt;Perceba como o processo de &lt;em&gt;debug&lt;/em&gt; se torna amigável quando sabemos como lidar com os métodos do objeto &lt;code&gt;console&lt;/code&gt;. Não somente, asseguramos uma inspeção mais rígida para possíveis erros e problemas no código.&lt;/p&gt;

&lt;p&gt;Outro ponto importante é realizar testes unitários e ter cuidado para que o seu código não fique repleto de &lt;code&gt;console.log&lt;/code&gt; e outros métodos desta API. Sugiro que use-a com bom senso, estude uma solução para equilibrar os testes e as depurações/inspeções, além de desenvolver uma metodologia para lidar com estes processos analíticos nos seus scripts.&lt;/p&gt;

&lt;p&gt;Até a próxima! =]&lt;/p&gt;

              &lt;h4 id=&quot;Referências&quot;&gt;
                &lt;a name=&quot;Referências&quot; href=&quot;#Referências&quot;&gt;&lt;/a&gt;Referências
              &lt;/h4&gt;
            
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/console&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getfirebug.com/wiki/index.php/Console_API&quot;&gt;Firebug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/devtools/docs/console-api&quot;&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/api/stdio.html&quot;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 07 Sep 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/examinando-sua-aplicacao/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/examinando-sua-aplicacao/</guid>
      </item>
    
      <item>
        <title>The book is on the table</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;É muito comum surgirem perguntas na comunidade sobre quais os livros mais adequados e recomendados para quem está iniciando (ou não) com programação em JavaScript.&lt;/p&gt;

&lt;p&gt;Por isso, vou compartilhar uma relação de livros que tive a oportunidade de ler, deixando uma breve descrição e algumas considerações.&lt;/p&gt;

&lt;p&gt;Vamos percorrer os seguintes tópicos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Olá, eu sou o JavaScript&lt;/li&gt;
&lt;li&gt;O treinamento Jedi&lt;/li&gt;
&lt;li&gt;Fique atento para alguns pontos&lt;/li&gt;
&lt;li&gt;Mais alguma consideração?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Então, vamos lá.&lt;/p&gt;

              &lt;h2 id=&quot;Olá-eu-sou-o-JavaScript&quot;&gt;
                &lt;a name=&quot;Olá-eu-sou-o-JavaScript&quot; href=&quot;#Olá-eu-sou-o-JavaScript&quot;&gt;&lt;/a&gt;Olá, eu sou o JavaScript
              &lt;/h2&gt;
            
&lt;p&gt;Criada por Brendan Eich há quase 20 anos, a linguagem de programação JavaScript se tornou muito popular nos últimos anos e mostrou-se extremamente poderosa. Trata-se de uma linguagem de alto nível, dinâmica, interpretada, não tipada, além de englobar paradigmas de orientação à objetos e funcional. Possui uma sintaxe herdada do &lt;em&gt;Java&lt;/em&gt;, aspectos funcionais do &lt;em&gt;Scheme&lt;/em&gt; e caracteristicas orientadas a objetos do &lt;em&gt;Self&lt;/em&gt;. Atualmente, está linguagem que foi mal compreendida por um bom tempo, se faz presente tanto no &lt;strong&gt;client-side&lt;/strong&gt; (DOM) quanto no &lt;strong&gt;server-side&lt;/strong&gt; (NodeJS).&lt;/p&gt;

&lt;p&gt;Se você está vindo do Java ou PHP, vale frisar que o JavaScript não possui classes. No JavaScript, as funções são tratadas como &lt;a href=&quot;&quot;&gt;objetos de primeira classe&lt;/a&gt; (first-class functions/objects) e sua &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;herança se baseia em protótipos&lt;/a&gt; (prototypal inheritance). Além disso, a linguagem possui &lt;a href=&quot;http://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;funções de ordem superior&lt;/a&gt; (high-order Functions), como, por exemplo, os métodos &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; e &lt;code&gt;forEach&lt;/code&gt; do objeto Array.&lt;/p&gt;

&lt;p&gt;Esta é uma breve (brevíssima) introdução. Caso você esteja começando do zero, &lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/JavaScript_Vis%C3%A3o_Geral&quot;&gt;sugiro que leia este material&lt;/a&gt; do MDN para entender mais sobre o JavaScript. Ok?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTA:&lt;/strong&gt; recentemente escrevi um artigo para quem está iniciando com o JavaScript. &lt;a href=&quot;http://www.vitorbritto.com.br/blog/iniciando-os-estudos-com-javascript/&quot;&gt;Confira aqui&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h2 id=&quot;O-treinamento-Jedi&quot;&gt;
                &lt;a name=&quot;O-treinamento-Jedi&quot; href=&quot;#O-treinamento-Jedi&quot;&gt;&lt;/a&gt;O treinamento Jedi
              &lt;/h2&gt;
            
&lt;p&gt;Antes de iniciar os seus estudos, lembre-se que a disciplina e a força de vontade são elementos necessários para obter sucesso no seu aprendizado. Reserve um horário tranquilo para que você possa estudar de maneira constante. Não se esqueça que praticar os códigos do livro e testar novas possibilidades são muito importantes para fixar o conhecimento obtido.&lt;/p&gt;

              &lt;h3 id=&quot;Iniciando-o-treinamento&quot;&gt;
                &lt;a name=&quot;Iniciando-o-treinamento&quot; href=&quot;#Iniciando-o-treinamento&quot;&gt;&lt;/a&gt;Iniciando o treinamento
              &lt;/h3&gt;
            
&lt;p&gt;Pois bem, antes de mais nada, a relação abaixo segue uma ordem com base em minhas experiências e leituras prévias. Espero que você se identifique de alguma forma e seja útil para os seus estudos.&lt;/p&gt;

&lt;p&gt;Vamos em frente.&lt;/p&gt;

              &lt;h4 id=&quot;JavaScript-O-Guia-Definitivo&quot;&gt;
                &lt;a name=&quot;JavaScript-O-Guia-Definitivo&quot; href=&quot;#JavaScript-O-Guia-Definitivo&quot;&gt;&lt;/a&gt;JavaScript: O Guia Definitivo
              &lt;/h4&gt;
            
&lt;p&gt;O livro conta com muitos detalhes a respeito do JavaScript básico e do seu comportamento no Client Side. Um breve capítulo é reservado para o JavaScript no Server Side (NodeJS), assim como capítulos direcionados para HTTP, APIs e HTML5, gráficos (Canvas e SVG) e a biblioteca jQuery. Além disso, conta com uma parte exclusiva para referências e consultas (a qual deveria ser uma parte separada do livro para facilitar a consulta rápida, algo como um &lt;em&gt;pocket book&lt;/em&gt;).&lt;/p&gt;

              &lt;h4 id=&quot;JavaScript-O-Guia-do-Programador&quot;&gt;
                &lt;a name=&quot;JavaScript-O-Guia-do-Programador&quot; href=&quot;#JavaScript-O-Guia-do-Programador&quot;&gt;&lt;/a&gt;JavaScript: O Guia do Programador
              &lt;/h4&gt;
            
&lt;p&gt;Um excelente livro! O Maujor destrincha de forma caprichosa cada um dos elementos do JavaScript básico (e no client-side também), aplicando, logo em seguida, um exemplo prático do respectivo elemento tratado. É uma ótima maneira de absorver o conceito e aplicá-lo logo em seguida.&lt;/p&gt;

              &lt;h4 id=&quot;jQuery-A-biblioteca-do-programador-JavaScript&quot;&gt;
                &lt;a name=&quot;jQuery-A-biblioteca-do-programador-JavaScript&quot; href=&quot;#jQuery-A-biblioteca-do-programador-JavaScript&quot;&gt;&lt;/a&gt;jQuery: A biblioteca do programador JavaScript
              &lt;/h4&gt;
            
&lt;p&gt;Infelizmente, a edição que possuo não reflete a API atual do jQuery. De qualquer forma, o livro cobre em detalhes a bilioteca e segue a mesma metodologia do livro anterior (JavaScript: O Guia do Programador). Recomendo que leia este livro somente depois que você possuir um entendimento razoável do JavaScript.&lt;/p&gt;

              &lt;h3 id=&quot;Se-tornando-um-Jedi&quot;&gt;
                &lt;a name=&quot;Se-tornando-um-Jedi&quot; href=&quot;#Se-tornando-um-Jedi&quot;&gt;&lt;/a&gt;Se tornando um Jedi
              &lt;/h3&gt;
            
&lt;p&gt;A partir deste momento, considero que você já possua um conhecimento considerável com relação ao JavaScript.&lt;/p&gt;

              &lt;h4 id=&quot;O-melhor-do-JavaScript&quot;&gt;
                &lt;a name=&quot;O-melhor-do-JavaScript&quot; href=&quot;#O-melhor-do-JavaScript&quot;&gt;&lt;/a&gt;O melhor do JavaScript
              &lt;/h4&gt;
            
&lt;p&gt;Apesar de muitos pensarem que trata-se de um livro para iniciantes, não é. Até porque, é difícil você compreender a linguagem com uma versão minificada das suas características.&lt;/p&gt;

&lt;p&gt;Este livro é um compilação feita pelo Douglas Crockford, o qual revela as boas partes, belas características e partes ruins da linguagem de programação JavaScript. A leitura deste livro exige um prévio conhecimento sobre funções, métodos, objetos e arrays no JavaScript.&lt;/p&gt;

&lt;p&gt;Para que fique mais fácil o entendimento: o &amp;quot;JavaScript: Guia Definitivo&amp;quot; prepara o terreno para que você aprenda esta linguagem de programação da melhor maneira possível, já o &amp;quot;O Melhor do JavaScript&amp;quot; é um convite para entender que &amp;quot;nem tudo são flores&amp;quot;, mas que tem jeito. Por fim, as soluções que oferecem melhorias às suas aplicações são compartilhadas no livro &amp;quot;Padrões JavaScript&amp;quot;.&lt;/p&gt;

              &lt;h4 id=&quot;Padrões-JavaScript&quot;&gt;
                &lt;a name=&quot;Padrões-JavaScript&quot; href=&quot;#Padrões-JavaScript&quot;&gt;&lt;/a&gt;Padrões JavaScript
              &lt;/h4&gt;
            
&lt;p&gt;Aqui, começa a ficar interessante e suas aplicações agradecem. Você entenderá porque trilhar um caminho com padrões e boas práticas são úteis para que suas aplicações mantenham coerência, qualidade, escalabilidade e um código manutenível.&lt;/p&gt;

&lt;p&gt;Neste livro, Stoyan faz uma breve introdução sobre os conceitos mais importantes orientados ao JavaScript, detalha os padrões básicos para tornar a sua aplicação mais sólida e performática (apontando anti-padrões e possíveis armadilhas), além de relacionar padrões para funções, na criação de objetos, reutilização de código, padrões de projeto e no browser.&lt;/p&gt;

              &lt;h4 id=&quot;JavaScript-de-Alto-Desempenho&quot;&gt;
                &lt;a name=&quot;JavaScript-de-Alto-Desempenho&quot; href=&quot;#JavaScript-de-Alto-Desempenho&quot;&gt;&lt;/a&gt;JavaScript de Alto Desempenho
              &lt;/h4&gt;
            
&lt;p&gt;Neste livro, o Nicholas Zakas mantém o foco em quais métodos podem ser utilizados para construir aplicações com boa performance e desempenho. Alguns pontos que foram apontados no livro anterior (Padrões JavaScript) podem ser revisados aqui.&lt;/p&gt;

              &lt;h4 id=&quot;Segredos-do-Ninja-JavaScript&quot;&gt;
                &lt;a name=&quot;Segredos-do-Ninja-JavaScript&quot; href=&quot;#Segredos-do-Ninja-JavaScript&quot;&gt;&lt;/a&gt;Segredos do Ninja JavaScript
              &lt;/h4&gt;
            
&lt;p&gt;IMHO, este livro é o &amp;quot;JavaScript: Guia Definitivo&amp;quot; para quem conhece e já possui alguma experiência com o JavaScript, além de denotar uma compilação do &amp;quot;Padrões JavaScript&amp;quot; e &amp;quot;JavaScript de Alto Desempenho&amp;quot; com uma excelente análise sobre testes unitários.&lt;/p&gt;

              &lt;h4 id=&quot;Javascript-Enlightenment&quot;&gt;
                &lt;a name=&quot;Javascript-Enlightenment&quot; href=&quot;#Javascript-Enlightenment&quot;&gt;&lt;/a&gt;Javascript Enlightenment
              &lt;/h4&gt;
            
&lt;p&gt;O livro não é sobre padrões, não menciona paradigmas de OO (orientação a objetos) no JavaScript, muito menos quais são os aspectos bons ou ruins. Cody Lindley convida o leitor para mergulhar nos detalhes das funções, objetos, arrays, closures e outros elementos que fazem parte do JavaScript.&lt;/p&gt;

&lt;p&gt;Além disso, recomendo a leitura deste livro para quem prefere iniciar o desenvolvimento de projetos com jQuery à JavaScript. Como a própria chamada do livro se refere: &amp;quot;De um usuário de bibliotecas para um programador em JavaScript&amp;quot;.&lt;/p&gt;

              &lt;h3 id=&quot;May-the-force-be-with-you&quot;&gt;
                &lt;a name=&quot;May-the-force-be-with-you&quot; href=&quot;#May-the-force-be-with-you&quot;&gt;&lt;/a&gt;May the force be with you
              &lt;/h3&gt;
            
&lt;p&gt;Daqui pra frente, deduzo que você já possua uma boa experiência com o JavaScript e queira adquirir conhecimentos avançados sobre a linguagem ou sobre tópicos mais específicos.&lt;/p&gt;

              &lt;h4 id=&quot;JavaScript-Web-Applications&quot;&gt;
                &lt;a name=&quot;JavaScript-Web-Applications&quot; href=&quot;#JavaScript-Web-Applications&quot;&gt;&lt;/a&gt;JavaScript Web Applications
              &lt;/h4&gt;
            
&lt;p&gt;Um livro recheado de conceitos, que ajuda você a desenvolver habilidades na criação de aplicações web, garantindo uma boa arquitetura, código manutenível e boas práticas no seu projeto.&lt;/p&gt;

              &lt;h4 id=&quot;Testable-JavaScript&quot;&gt;
                &lt;a name=&quot;Testable-JavaScript&quot; href=&quot;#Testable-JavaScript&quot;&gt;&lt;/a&gt;Testable JavaScript
              &lt;/h4&gt;
            
&lt;p&gt;Um ótimo livro para adquirir um conhecimento sólido em testes com JavaScript. Cobre pontos conceituais, boas práticas, padrões e métodos para tornar o desenvolvimento da sua aplicação manutenível. Além disso, aborda cenários para automação, inspeção e &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;entrega do seu código com qualidade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apesar do livro ser bem detalhado, recomendo fortemente que você já possua um contato prévio com testes unitários e &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;design patterns&lt;/a&gt;.&lt;/p&gt;

              &lt;h4 id=&quot;Functional-JavaScript&quot;&gt;
                &lt;a name=&quot;Functional-JavaScript&quot; href=&quot;#Functional-JavaScript&quot;&gt;&lt;/a&gt;Functional JavaScript
              &lt;/h4&gt;
            
&lt;p&gt;Leitura em andamento, mas posso dizer que me supreendo a cada página. A programação funcional no JavaScript é algo mágico! Em paralelo, estou realizando alguns experimentos com o &lt;a href=&quot;http://www.haskell.org/haskellwiki/Haskell&quot;&gt;Haskell&lt;/a&gt;. Sugiro que dê uma olhada nesta linguagem. Vai mudar a sua vida e agregar conhecimento sobre funções.&lt;/p&gt;

              &lt;h2 id=&quot;Fique-atento-para-alguns-pontos&quot;&gt;
                &lt;a name=&quot;Fique-atento-para-alguns-pontos&quot; href=&quot;#Fique-atento-para-alguns-pontos&quot;&gt;&lt;/a&gt;Fique atento para alguns pontos
              &lt;/h2&gt;
            
&lt;p&gt;É muito comum a tradução de termos técnicos em livros de Algortimos, Lógica de Programação e linguagens mais antigas. Esse péssimo hábito foi herdado nos livros sobre JavaScript também. Por isso, vou listar alguns termos que sofreram traduções equivocadas e/ou desnecessárias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fechamento -&amp;gt; &lt;strong&gt;Closure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Içamento -&amp;gt; &lt;strong&gt;Hoisting&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Função de chamada de retorno -&amp;gt; &lt;strong&gt;Callback&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Nó -&amp;gt; &lt;strong&gt;Node&lt;/strong&gt; (DOM)&lt;/li&gt;
&lt;li&gt;marca -&amp;gt; &lt;strong&gt;tag&lt;/strong&gt; (HTML)&lt;/li&gt;
&lt;li&gt;matriz/vetor -&amp;gt; &lt;strong&gt;Array&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;sequência de caracteres -&amp;gt; &lt;strong&gt;Strings&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em alguns momentos, funções são traduzidas como métodos e vice-versa. Fique atento! Métodos são funções, mas esta nomenclatura se dá quando consta como parte integrada em um objeto.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;function fn() {} // função declarativa
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;var fn = function() {}; // função literal
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;function() {} // função anônima
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;var objeto = {
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;    propriedade: &amp;#39;valor&amp;#39;,
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;    metodo: function() {
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;        // é uma função, mas chamamos de método por fazer parte de um objeto
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;    }
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Além disso, relaciono alguns nomes e siglas importantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CommonJS&lt;/strong&gt;, &lt;strong&gt;AMD&lt;/strong&gt;, &lt;strong&gt;UMD&lt;/strong&gt;: padrões para modularização e carregamento de arquivos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RequireJS&lt;/strong&gt;, &lt;strong&gt;BrowserifyJS&lt;/strong&gt;: ferramentas utilizadas no padrão AMD e CommonJS respectivamente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOM&lt;/strong&gt;: Document Object Model&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BOM&lt;/strong&gt;: Browser Object Model&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QUnit&lt;/strong&gt;, &lt;strong&gt;Jasmine&lt;/strong&gt;, &lt;strong&gt;Mocha&lt;/strong&gt;, &lt;strong&gt;Nodeunit&lt;/strong&gt;: ferramentas para testes unitários no JavaScript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;BDD&lt;/strong&gt;: métodos para testes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SPA&lt;/strong&gt;: Single Page Application&lt;/li&gt;
&lt;/ul&gt;

              &lt;h2 id=&quot;Mais-alguma-consideração-&quot;&gt;
                &lt;a name=&quot;Mais-alguma-consideração-&quot; href=&quot;#Mais-alguma-consideração-&quot;&gt;&lt;/a&gt;Mais alguma consideração?
              &lt;/h2&gt;
            
&lt;p&gt;Existem muitos outros títulos excelentes sobre JavaScript, mas procurei listar os que já tive a oportunidade em ler para que pudesse dar um feedback e um contexto geral de cada um.&lt;/p&gt;

&lt;p&gt;Além disso, existem algumas considerações interessantes para aprofundar os seus estudos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leitura do códigos de terceiros:&lt;/strong&gt; observe como os desenvolvedores, que estão há mais tempo lidando com a linguagem, criam seus códigos e organizam os mesmos;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ler artigos:&lt;/strong&gt; a leitura de artigos ajuda a solucionar possíveis problemas já enfrentados por outros desenvolvedores, além de conhecer como aplicar determinada solução para um dado cenário.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Praticar:&lt;/strong&gt; pratique os códigos expostos em um artigo, livro ou qualquer outro documento! Com a prática vem a experiência.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assistir palestras:&lt;/strong&gt; existem diversos vídeos de palestras disponíveis no Youtube sobre novos tópicos relacionados ao JavaScript. É importante estar atenado e saber o que está acontecendo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participar de eventos:&lt;/strong&gt; temos muitos eventos no Brasil, que tratam de temas relacionados ao JavaScript. Além disso, o &lt;em&gt;networking&lt;/em&gt; será importante para a troca de experiências e conhecimento com demais colegas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Além de algumas leituras complementares:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Learning JavaScript Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E você, tem mais alguma consideração para acrescentar aqui?&lt;/p&gt;

&lt;p&gt;Bons estudos e até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Sep 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/the-book-is-on-the-table/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/the-book-is-on-the-table/</guid>
      </item>
    
      <item>
        <title>Um universo de APIs</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Assim como a prática na programação ajuda os desenvolvedores a evoluírem suas habilidades, a pesquisa é uma ação que também necessita de prática. Criando o hábito da pesquisa, encontrar soluções para possíveis problemas tornam-se muito mais fáceis.&lt;/p&gt;

&lt;p&gt;Sempre indico o &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;MDN&lt;/a&gt; para consultas, estudos e referências. É uma excelente e confiável fonte para estudos de tecnologias voltadas para a web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Recentemente desenvolvi um &lt;a href=&quot;https://github.com/vitorbritto/gomdn&quot;&gt;módulo para Node&lt;/a&gt; onde é possível realizar consultas no MDN. Não preciso comentar que contribuições e sugestões são bem vindas, não é? Ops, comentei! =P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quando estamos lidando com o JavaScript no &lt;em&gt;client-side&lt;/em&gt;, diversas APIs estão a nossa disposição. Neste artigo, darei algumas dicas sobre como consultar e estudar tais APIs.&lt;/p&gt;

              &lt;h2 id=&quot;Então-vamos-as-dicas&quot;&gt;
                &lt;a name=&quot;Então-vamos-as-dicas&quot; href=&quot;#Então-vamos-as-dicas&quot;&gt;&lt;/a&gt;Então, vamos as dicas
              &lt;/h2&gt;
            
&lt;p&gt;Mesmo antes de consultar uma documentação, é importante saber como funciona o mecânismo de busca e o padrão utilizado para sua organização. Do contrário, você pode se perder no meio do caminho. Apesar de ser muito difícil que isso aconteça no MDN (se perder), não custa dar uma breve orientação.&lt;/p&gt;

              &lt;h3 id=&quot;Realizando-uma-consulta-rápida&quot;&gt;
                &lt;a name=&quot;Realizando-uma-consulta-rápida&quot; href=&quot;#Realizando-uma-consulta-rápida&quot;&gt;&lt;/a&gt;Realizando uma consulta rápida
              &lt;/h3&gt;
            
&lt;p&gt;Se a sua intenção é realizar uma consulta rápida para uma determinada API, o MDN dispõe de um &lt;strong&gt;index&lt;/strong&gt; com todas as APIs disponíveis, não padronizadas, experimentais e, até mesmo, as obsoletas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visite:&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API&lt;/a&gt;&lt;/p&gt;

              &lt;h3 id=&quot;Análises-direcionadas-para-um-conjunto-de-APIs&quot;&gt;
                &lt;a name=&quot;Análises-direcionadas-para-um-conjunto-de-APIs&quot; href=&quot;#Análises-direcionadas-para-um-conjunto-de-APIs&quot;&gt;&lt;/a&gt;Análises direcionadas para um conjunto de APIs
              &lt;/h3&gt;
            
&lt;p&gt;Se pretende orientar seus estudos/análises a um conjunto de APIs, o MDN também facilita a sua pesquisa para este caso.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visite:&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Reference/API&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/Reference/API&lt;/a&gt;&lt;/p&gt;

              &lt;h3 id=&quot;Centralizando-as-consultas-em-um-local&quot;&gt;
                &lt;a name=&quot;Centralizando-as-consultas-em-um-local&quot; href=&quot;#Centralizando-as-consultas-em-um-local&quot;&gt;&lt;/a&gt;Centralizando as consultas em um local
              &lt;/h3&gt;
            
&lt;p&gt;Por alguns meses utilizei o Dash. É uma excelente ferramenta (App Mac only) para consultas de documentações e obteve um crescimento surpreendente com a nova versão. Infelizmente, ele não se deu bem com o meu querido MacBook White (2009). Sendo assim, voltei para o &lt;a href=&quot;http://devdocs.io&quot;&gt;DevDocs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O DevDocs não deixa a desejar e quebra um galho tremendo nas minhas consultas diárias. Além disso, oferece um index com todas as APIs e uma relação destas APIs agrupadas por casos de uso.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; há algum tempo desenvolvi um simples &lt;a href=&quot;https://github.com/vitorbritto/sublime-devdocs&quot;&gt;plugin&lt;/a&gt; para realizar pesquisas no DevDocs através do Sublime 2/3. Fique a vontade para… já sabe o resto né? =P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Visite:&lt;/strong&gt; &lt;a href=&quot;http://devdocs.io/dom/&quot;&gt;http://devdocs.io/dom/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bons estudos e até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Sep 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/um-universo-de-apis/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/um-universo-de-apis/</guid>
      </item>
    
      <item>
        <title>Iniciando os estudos com JavaScript</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Estarei compartilhando um método simples e eficaz para que você inicie os estudos com a linguagem JavaScript. Entretanto, antes mesmo que você continue a leitura deste artigo, me permita fazer um pequeno &lt;strong&gt;disclaimer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O idioma inglês se faz necessário para executar os passos a seguir e será utilizado o Firefox para executar/praticar os códigos. De toda forma, fique a vontade para utilizar o navegador de sua preferência. O importante é que os códigos sejam praticados. Ok?&lt;/p&gt;

&lt;p&gt;Vale frisar também que, mesmo com o esforço em contribuir com &lt;a href=&quot;http://cerebrobr.github.io/cerebro/&quot;&gt;materiais em português&lt;/a&gt;, o idioma inglês é muito importante na área de TI, assim como para o desenvolvedor/programador que esteja em busca do constante crescimento na sua profissão.&lt;/p&gt;

&lt;p&gt;Se você pretende ingressar nesta área, entenda que o idioma dominante é o inglês e você precisa dele para ser bem sucedido.&lt;/p&gt;

&lt;p&gt;Podemos prosseguir?&lt;/p&gt;

              &lt;h2 id=&quot;Uma-breve-história&quot;&gt;
                &lt;a name=&quot;Uma-breve-história&quot; href=&quot;#Uma-breve-história&quot;&gt;&lt;/a&gt;Uma breve história
              &lt;/h2&gt;
            
&lt;p&gt;Quando tive o primeiro contato com a Internet, em meados de 1994, fiquei fascinado. Logo meus vícios eram:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Criar Scripts para mIRC;&lt;/li&gt;
&lt;li&gt;jogar Duke Nukem online;&lt;/li&gt;
&lt;li&gt;e navegar na Web.&lt;/li&gt;
&lt;/ul&gt;

              &lt;h3 id=&quot;Então-o-JavaScript-apareceu-na-minha-vida&quot;&gt;
                &lt;a name=&quot;Então-o-JavaScript-apareceu-na-minha-vida&quot; href=&quot;#Então-o-JavaScript-apareceu-na-minha-vida&quot;&gt;&lt;/a&gt;Então o JavaScript apareceu na minha vida
              &lt;/h3&gt;
            
&lt;p&gt;No final do ano de 1997 &amp;quot;conheci&amp;quot; o JavaScript. Confesso que foi por acaso! Visitei uma homepage e a janela começou a tremer. Resolvi comentar com alguns amigos sobre o ocorrido e um deles (o mais Nerd de todos) disse ser &lt;strong&gt;o DHTML&lt;/strong&gt;. O mesmo me falou para clicar com o botão direito do mouse na janela do navegador (já na tal homepage) e selecionar a opção &lt;em&gt;View Source Code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Então, chegando em casa, fiz exatamente o que o colega me falou. Um emaranhado de números e letras surgiram na minha frente e, é claro, tive o meu primeiro contato com o HTML, CSS e &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Obviamente, eu não sabia o que eram esses caras. Eu não entendia como aquilo funcionava. Não sabia porque a tela tremia, porque um alerta era exibido, porque o cursor do mouse deixava rastros coloridos ou porque tantos outros comportamentos interessantes e &amp;quot;estranhos&amp;quot; no browser aconteciam.&lt;/p&gt;

&lt;p&gt;A única coisa que eu tinha em mente era: &amp;quot;Eu quero aprender a fazer isso!&amp;quot;.&lt;/p&gt;

              &lt;h3 id=&quot;Foi-difícil-no-começo-mas-eu-não-desisti&quot;&gt;
                &lt;a name=&quot;Foi-difícil-no-começo-mas-eu-não-desisti&quot; href=&quot;#Foi-difícil-no-começo-mas-eu-não-desisti&quot;&gt;&lt;/a&gt;Foi difícil no começo, mas eu não desisti
              &lt;/h3&gt;
            
&lt;p&gt;Um dos motivos em compartilhar o conhecimento que obtive durante todo esse tempo, é porque entendo como é complicado iniciar os estudos na área da programação, sem ter a menor ideia de como funciona ou ter algum contato prévio com disciplinas que tratam especificamente da lógica, dos algoritmos e da estrutura de dados.&lt;/p&gt;

&lt;p&gt;Na minha época, o material era o código fonte. Livro? Rede social? Curso online? Esqueça! Sem falar que os materiais eram dispersos e difíceis de encontrar. Notepad e Netscape eram meus melhores amigos nesta jornada. Somente depois de alguns meses, encontrei o &lt;a href=&quot;http://www.javascriptkit.com/&quot;&gt;JavaScript Kit&lt;/a&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Alguns-anos-se-passaram&quot;&gt;
                &lt;a name=&quot;Alguns-anos-se-passaram&quot; href=&quot;#Alguns-anos-se-passaram&quot;&gt;&lt;/a&gt;Alguns anos se passaram
              &lt;/h3&gt;
            
&lt;p&gt;Ingressei na faculdade de Análise de Sistemas e, com o &lt;em&gt;networking&lt;/em&gt;, ficou mais fácil dar continuidade aos estudos. Tudo começou a fazer mais sentido. Não somente, conhecer o Unix e a linguagem C foram fatores importantes para o meu crescimento.&lt;/p&gt;

&lt;p&gt;Você deve estar se perguntando: &amp;quot;E cadê o JavaScript?&amp;quot;.&lt;/p&gt;

&lt;p&gt;Calma jovem Jedi! Eu percorri todo esse caminho para lhe mostrar que, há 17 anos, era muito difícil encontrar material relacionado ao JavaScript. Diferente de hoje, onde existem muitas possibilidades e meios de pesquisa à sua volta para garantir um aprendizado sólido e eficaz com esta linguagem.&lt;/p&gt;

              &lt;h2 id=&quot;Iniciando-a-sua-jornada-com-JavaScript&quot;&gt;
                &lt;a name=&quot;Iniciando-a-sua-jornada-com-JavaScript&quot; href=&quot;#Iniciando-a-sua-jornada-com-JavaScript&quot;&gt;&lt;/a&gt;Iniciando a sua jornada com JavaScript
              &lt;/h2&gt;
            
&lt;p&gt;Eu darei o mapa e você vai se aventurar para encontrar o tesouro. Vai depender exclusivamente de você para garantir o sucesso no aprendizado. Ok?&lt;/p&gt;

&lt;p&gt;Pois bem! Vou listar um programa de 4 passos para você que deseja iniciar os estudos em JavaScript.&lt;/p&gt;

&lt;p&gt;Não faremos um caminho cansativo e complicado, não haverá leitura de livros ou artigos. Será o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;Guia do MDN&lt;/a&gt;, o &lt;a href=&quot;https://www.mozilla.org/pt-BR/firefox/new/&quot;&gt;Firefox&lt;/a&gt; (ou o seu navegador preferido) e você!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Regra básica e obrigatória:&lt;/strong&gt; é preciso disciplina e força de vontade.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então, vamos as etapas envolvidas neste processo.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estabeleça uma metodologia&lt;/li&gt;
&lt;li&gt;Prepare o ambiente de estudos&lt;/li&gt;
&lt;li&gt;Não tenha medo de errar&lt;/li&gt;
&lt;li&gt;Compartilhe a sua evolução&lt;/li&gt;
&lt;/ol&gt;

              &lt;h3 id=&quot;Estabeleça-uma-metodologia&quot;&gt;
                &lt;a name=&quot;Estabeleça-uma-metodologia&quot; href=&quot;#Estabeleça-uma-metodologia&quot;&gt;&lt;/a&gt;Estabeleça uma metodologia
              &lt;/h3&gt;
            
&lt;p&gt;No artigo &lt;a href=&quot;http://www.vitorbritto.com.br/blog/experimente-experimentar/&quot;&gt;&amp;quot;Experimente Experimentar&amp;quot;&lt;/a&gt;, menciono uma metodologia que estou utilizando há algum tempo para exercitar, experimentar e praticar conceitos novos e antigos com relação às linguagens de programação, as quais fazem parte da minha rotina de trabalho e experimentos. O importante é que você estabeleça uma metodologia própria para os seus estudos e que esteja de acordo com a sua rotina. Não atropele as demais atividades do dia e nem deixe que estas atividades atropelem os seus estudos.&lt;/p&gt;

              &lt;h3 id=&quot;Prepare-o-ambiente-de-estudos&quot;&gt;
                &lt;a name=&quot;Prepare-o-ambiente-de-estudos&quot; href=&quot;#Prepare-o-ambiente-de-estudos&quot;&gt;&lt;/a&gt;Prepare o ambiente de estudos
              &lt;/h3&gt;
            
&lt;ul&gt;
&lt;li&gt;Reserve um espaço tranquilo e que mantenha você concentrado.&lt;/li&gt;
&lt;li&gt;Salve uma playlist com músicas do seu agrado e deixe a caneca de café por perto &lt;em&gt;(opcional)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Faça o download da última versão do &lt;a href=&quot;https://www.mozilla.org/pt-BR/firefox/new/&quot;&gt;Firefox&lt;/a&gt; e instale-o &lt;em&gt;(opcional)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Acesse o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;Guia do MDN&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

              &lt;h3 id=&quot;Não-tenha-medo-de-errar&quot;&gt;
                &lt;a name=&quot;Não-tenha-medo-de-errar&quot; href=&quot;#Não-tenha-medo-de-errar&quot;&gt;&lt;/a&gt;Não tenha medo de errar
              &lt;/h3&gt;
            
&lt;p&gt;Realizou os procedimentos acima? Então comece a ler o material e pratique &lt;strong&gt;TODOS&lt;/strong&gt; os códigos dos exemplos &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/About#Tips_for_learning_JavaScript&quot;&gt;de acordo com as dicas do Guia MDN&lt;/a&gt; ou da maneira que se sentir mais confortável no seu navegador preferido!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;O mais importante:&lt;/strong&gt; não tenha medo de errar e TESTE novas possibilidades. Não fique somente no feijão com arroz.&lt;/p&gt;

              &lt;h3 id=&quot;Compartilhe-sua-evolução&quot;&gt;
                &lt;a name=&quot;Compartilhe-sua-evolução&quot; href=&quot;#Compartilhe-sua-evolução&quot;&gt;&lt;/a&gt;Compartilhe sua evolução
              &lt;/h3&gt;
            
&lt;p&gt;Compartilhe o que aprendeu e solicite o feedback de outros colegas. Afinal, é válido buscar outras opiniões e possíveis soluções. Entretanto, quando o fizer, deixe pública a sua dúvida. Nem sempre &amp;quot;aquele colega experiente&amp;quot; estará disponível para lhe dar um feedback via &lt;em&gt;inbox&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Deixando sua dúvida em um grupo ou fórum, as chances em obter mais feedbacks é bem maior. Não concorda?&lt;/p&gt;

&lt;p&gt;Não fique com receio em alguém lhe dizer algo mais ríspido ou que se torne frustrante para você. Seja paciente e acredite na sua capacidade. Assim como você, todos eles também começaram do zero. Inclusíve eu (como você pôde perceber mais acima)!&lt;/p&gt;

&lt;p&gt;Errar é um processo natural e que eleva o nível de aprendizado. Confie em você e no seu potêncial!&lt;/p&gt;

              &lt;h2 id=&quot;Seja-parceiro-do-JavaScript&quot;&gt;
                &lt;a name=&quot;Seja-parceiro-do-JavaScript&quot; href=&quot;#Seja-parceiro-do-JavaScript&quot;&gt;&lt;/a&gt;Seja parceiro do JavaScript
              &lt;/h2&gt;
            
&lt;p&gt;Se você quer aprender JavaScript, deve esquecer o jQuery e qualquer outra ferramenta que atue como um elemento &amp;quot;facilitador&amp;quot; no início da jornada. Dê um passo de cada vez e mantenha os estudos constantes. Uma vez que você entenda o universo JavaScript, fica muito mais fácil para manusear e explorar no futuro as suas libs, plugins, frameworks e afins.&lt;/p&gt;

&lt;p&gt;Bons estudos e até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/iniciando-os-estudos-com-javascript/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/iniciando-os-estudos-com-javascript/</guid>
      </item>
    
      <item>
        <title>Experimente Experimentar</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Redundância a parte, me responda o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Você tem o costume de praticar/replicar o código que lê em determinado artigo ou livro?&lt;/li&gt;
&lt;li&gt;E o que aprendeu há alguns anos?&lt;/li&gt;
&lt;li&gt;Aqueles conceitos mais básico, lembra deles ainda?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pois bem, algo que aprendi na minha profissão é que a experiência vem com a prática e em como aplicamos o nosso conhecimento no dia a dia.&lt;/p&gt;

&lt;p&gt;Neste artigo, veremos como a prática pode ser usada para potencializar a experiência e fixar determinado conhecimento. Em específico, estaremos tratando das linguagens de programação. Então, vamos em frente.&lt;/p&gt;

              &lt;h2 id=&quot;O-conhecimento-é-inesgotável-&quot;&gt;
                &lt;a name=&quot;O-conhecimento-é-inesgotável-&quot; href=&quot;#O-conhecimento-é-inesgotável-&quot;&gt;&lt;/a&gt;O conhecimento é inesgotável...
              &lt;/h2&gt;
            
&lt;p&gt;Durante as duas semanas que se passaram, tenho exercitado bastante (mais do que o normal) as técnicas adquiridas e àquelas que adquiri há muitos anos! Não importa o nível de complexidade, estou aplicando gradativamente desde o nível mais básico.&lt;/p&gt;

&lt;p&gt;Com isso, pude perceber que alguns conceitos simples estavam perdidos no tempo e, com esta revisão, consegui injetá-los novamente.&lt;/p&gt;

&lt;p&gt;Ainda esta semana, tomei a decisão de abandonar projetos que envolvam PHP no desenvolvimento Back-End e me dedicar exclusivamente ao Ruby. Você pode conferir o artigo sobre esta decisão &lt;a href=&quot;http://www.vitorbritto.com.br/blog/aprendi-a-dizer-adeus/&quot;&gt;aqui&lt;/a&gt;, mas adianto que o motivo foi por adaptação e frustrações passadas com o PHP.&lt;/p&gt;

&lt;p&gt;Enfim, sem #mimimis, página virada. Vamos em frente.&lt;/p&gt;

&lt;p&gt;Quando se é Freelancer e dono do próprio negócio (meu caso), você precisa ser autodidata. IMHO, isso passa a ser uma obrigação pois, o seu &lt;em&gt;networking&lt;/em&gt; é quase nulo e, a não ser pelos eventos e encontros (meet ups) realizados pela comunidade, você ficará restrito a um ambiente isolado de outros profissionais na sua rotina de trabalho. Dito isso, é preciso manter um alto nível de disciplina e buscar o conhecimento, seja discutindo ou debatendo sobre determinado tema nas redes sociais, fazendo a leitura de artigos, livros ou &lt;strong&gt;praticando&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Adquirir o conceito e entender como uma linguagem funciona é essencial. Saber a sua sintaxe e os termos técnicos envolvidos nesta linguagem, ajudam na comunicação com outros desenvolvedores. De toda forma, isso não se torna suficiente e é aí que a prática entra em campo para fazer a diferença.&lt;/p&gt;

&lt;p&gt;Afinal, mesmo o conhecimento sendo inesgotável...&lt;/p&gt;

              &lt;h2 id=&quot;-ele-pode-ser-esquecido-se-não-praticado-&quot;&gt;
                &lt;a name=&quot;-ele-pode-ser-esquecido-se-não-praticado-&quot; href=&quot;#-ele-pode-ser-esquecido-se-não-praticado-&quot;&gt;&lt;/a&gt;… ele pode ser esquecido, se não praticado.
              &lt;/h2&gt;
            
&lt;p&gt;Ao ponto em que pode ser esquecido, precisamos nos doutrinar para que a prática seja uma constante em nossa profissão. A partir do momento em que você pratica o que aprendeu (fazendo disso um hábito), seja qual for o tema, você consegue fixar mais detalhes e entender melhor o cenário em questão.&lt;/p&gt;

&lt;p&gt;Se eu te perguntar o que é uma função imediata no JavaScript (alguns a chamam de função auto-executável), você pode até saber do que se trata. Entretanto, se você nunca &amp;quot;pôs a mão na massa&amp;quot; e desenvolveu alguma solução com a &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot;&gt;IIFE&lt;/a&gt;, como saberá o mecânismo que atua por trás dela? O que faz ela ser imediata? Lembra como ela deve ser aplicada?  ¯\ &lt;em&gt;(ツ)&lt;/em&gt; /¯&lt;/p&gt;

              &lt;h2 id=&quot;O-que-eu-fiz-&quot;&gt;
                &lt;a name=&quot;O-que-eu-fiz-&quot; href=&quot;#O-que-eu-fiz-&quot;&gt;&lt;/a&gt;O que eu fiz?
              &lt;/h2&gt;
            
&lt;p&gt;Pratiquei. Ou seja, Rock and Roll baby! \m/ (&amp;gt;_&amp;lt;) \m/&lt;/p&gt;

&lt;p&gt;Desde de que entrei no universo dos códigos, venho praticando e procurando entender as questões envolvida em cada problema. A curiosidade, disciplina e força de vontade foram fatores decisivos. Então, para atingir um resultado satisfatório, foi preciso manter a ordem e fazer com que o meu progresso fosse constante e &lt;strong&gt;necessário&lt;/strong&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Primeiro-coloque-ordem-na-casa&quot;&gt;
                &lt;a name=&quot;Primeiro-coloque-ordem-na-casa&quot; href=&quot;#Primeiro-coloque-ordem-na-casa&quot;&gt;&lt;/a&gt;Primeiro... coloque ordem na casa
              &lt;/h3&gt;
            
&lt;p&gt;Bom, antes de começar a aplicar o que aprendeu é preciso um planejamento e disciplina. No meu caso, orientei meus estudos para o turno noturno, em um período diário de 2 horas. De preferência, acompanhado de uma boa música (no meu caso, um bom Death Metal, Metallica, Pantera ou Black Sabbath).&lt;/p&gt;

&lt;p&gt;Feito este planejamento, basta se doutrinar e agir conforme o escopo estabelecido previamente. Se você estabeleceu seu horário de estudos entre 20:00 e 22:00, cumpra-o! Se por algum motivo você não pôde estudar no horário pré-estabelecido, remaneje para mais cedo ou mais tarde. Mas, fique atento! Não faça com que estas mudanças de horário se tornem uma rotina.&lt;/p&gt;

              &lt;h3 id=&quot;Segundo-Registre-sua-evolução&quot;&gt;
                &lt;a name=&quot;Segundo-Registre-sua-evolução&quot; href=&quot;#Segundo-Registre-sua-evolução&quot;&gt;&lt;/a&gt;Segundo… Registre sua evolução
              &lt;/h3&gt;
            
&lt;p&gt;É importante que os seus experimentos, e tudo o que você está aprendendo, seja registrado. Fique tranquilo e esqueça questões de performance e padrões no início. Estes aspectos e as boas práticas serão alcançadas/modificadas à medida em que você for refatorando os pontos necessários de cada experimento. Para os meus experimentos, criei um repositório entitulado &lt;a href=&quot;https://github.com/vitorbritto/labs&quot;&gt;&lt;strong&gt;LABS&lt;/strong&gt;&lt;/a&gt; no GitHub.&lt;/p&gt;

&lt;p&gt;Uma boa organização é muito importante também. No meu caso, estou dividindo os experimentos em quatro pontos/partes:&lt;/p&gt;

&lt;p&gt;1 - Anotações Gerais
2 - Guia Geral
3 - Passo a Passo
4 - Problemas Comuns&lt;/p&gt;

              &lt;h4 id=&quot;Anotações-Gerais&quot;&gt;
                &lt;a name=&quot;Anotações-Gerais&quot; href=&quot;#Anotações-Gerais&quot;&gt;&lt;/a&gt;Anotações Gerais
              &lt;/h4&gt;
            
&lt;p&gt;Estas anotações referem-se ao experimento proposto. Então, por exemplo, se você está praticando com &lt;em&gt;strings&lt;/em&gt; no JavaScript, procure dar uma breve descrição de como este cara se comporta na linguagem, quais as suas funções/métodos e faça um &lt;em&gt;overview&lt;/em&gt; sobre alguns aspectos gerais para utilizá-lo.&lt;/p&gt;

              &lt;h4 id=&quot;Guia-Geral&quot;&gt;
                &lt;a name=&quot;Guia-Geral&quot; href=&quot;#Guia-Geral&quot;&gt;&lt;/a&gt;Guia Geral
              &lt;/h4&gt;
            
&lt;p&gt;Ainda com relação às &lt;em&gt;strings&lt;/em&gt;, temos alguns métodos como: &lt;code&gt;trim()&lt;/code&gt;, &lt;code&gt;toUpperCase()&lt;/code&gt;, &lt;code&gt;toLowerCase()&lt;/code&gt;. Neste ponto/parte, aplique de forma mais direta. Veja o exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;I love JavaScript  &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; você pode encadear estes caras, criando um &lt;em&gt;&lt;a href=&quot;http://javascriptissexy.com/beautiful-javascript-easily-create-chainable-cascading-methods-for-expressiveness/&quot;&gt;method chaining&lt;/a&gt;&lt;/em&gt;. Desta forma, você evita a repetição da variável &lt;code&gt;str&lt;/code&gt; e refatora o código para que fique mais legível criando um estilo de cascata para os métodos a serem utilizados.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h4 id=&quot;Passo-a-passo&quot;&gt;
                &lt;a name=&quot;Passo-a-passo&quot; href=&quot;#Passo-a-passo&quot;&gt;&lt;/a&gt;Passo a passo
              &lt;/h4&gt;
            
&lt;p&gt;Esta parte é onde você dá o primeiro passo, o mais básico possível, para o elemento que você está experimentando/praticando. O grau de complexidade vai aumentando gradativamete.&lt;/p&gt;

&lt;p&gt;Pense como um jogo, sem macetes, onde você começa com um mínimo de &lt;em&gt;life&lt;/em&gt;, pouca munição e uma arma bem básica. A cada missão cumprida, essa complexidade aumenta no próximo nível e, consequentemente, novas armas, municação e &lt;em&gt;life&lt;/em&gt; são (e podem ser) adquiridos. Ou seja, &lt;strong&gt;complexidade&lt;/strong&gt; e &lt;strong&gt;prática&lt;/strong&gt; se tornam &lt;strong&gt;diretamente&lt;/strong&gt; proporcionais logo no início. Porém, se tornam &lt;strong&gt;inversamente&lt;/strong&gt; proporcionais com o tempo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resumindo:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ao iniciar:&lt;/strong&gt; complexidade tende a aumentar -&amp;gt; a prática também&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Com o tempo&lt;/strong&gt; dificuldade começa a diminuir -&amp;gt; a prática continua aumentado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Savvy? =]&lt;/p&gt;

              &lt;h4 id=&quot;Problemas-Comuns&quot;&gt;
                &lt;a name=&quot;Problemas-Comuns&quot; href=&quot;#Problemas-Comuns&quot;&gt;&lt;/a&gt;Problemas Comuns
              &lt;/h4&gt;
            
&lt;p&gt;Nesta parte, não há limites. Aqui, serão colocadas experiências ou relatos de colegas que enfretaram problemas e que são comuns na nossa área. Por exemplo, ainda se tratando de &lt;em&gt;strings&lt;/em&gt;: como podem ser concatenadas no JavaScript?&lt;/p&gt;

              &lt;h2 id=&quot;Um-passo-de-cada-vez&quot;&gt;
                &lt;a name=&quot;Um-passo-de-cada-vez&quot; href=&quot;#Um-passo-de-cada-vez&quot;&gt;&lt;/a&gt;Um passo de cada vez
              &lt;/h2&gt;
            
&lt;ul&gt;
&lt;li&gt;Não espere saber tudo e da melhor forma possível sempre.&lt;/li&gt;
&lt;li&gt;Não exija muito de você. Seja sensato, disciplinado e &lt;em&gt;take your time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ninguém nasce sabendo! Existe uma evolução natural e constante para conseguir determinado conhecimento.&lt;/li&gt;
&lt;li&gt;Haverão momentos onde o erro vai persistir por algum tempo até você encontrar uma solução. Está solução pode ser encontrada com uma gambiarra ou não.&lt;/li&gt;
&lt;li&gt;Gambiarra não significa &lt;strong&gt;errar&lt;/strong&gt;! Veja como um &amp;quot;processo criativo&amp;quot;, mas que precisa, necessariamente, ser adaptado e otimizado.&lt;/li&gt;
&lt;li&gt;Faça a leitura dos códigos de outros desenvolvedores para agregar conhecimento e desvendar os mistérios de uma linguagem.&lt;/li&gt;
&lt;li&gt;Tome a leitura destes códigos como parte importante para aguçar o seu raciocínio lógico.&lt;/li&gt;
&lt;li&gt;Busque sempre novos desafios e meios para construir novas soluções.&lt;/li&gt;
&lt;li&gt;Você pode e tem capacidade para chegar lá. Basta querer e praticar!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Aug 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/experimente-experimentar/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/experimente-experimentar/</guid>
      </item>
    
      <item>
        <title>Aprendi a dizer adeus</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Despedir-se do passado é o primeiro passo para viver novas histórias. Este passo, nos traz um grau de amadurecimento e abre espaço para novos desafios. Nem sempre as decisões são fáceis. Escolher um novo caminho para trilhar é uma tarefa a ser analisada com bastante critério.&lt;/p&gt;

&lt;p&gt;Enfim, chegou um desses momentos…&lt;/p&gt;

              &lt;h2 id=&quot;Desembucha-cara-&quot;&gt;
                &lt;a name=&quot;Desembucha-cara-&quot; href=&quot;#Desembucha-cara-&quot;&gt;&lt;/a&gt;Desembucha cara...
              &lt;/h2&gt;
            
&lt;p&gt;Estou sendo dramático, não é? LOL! Tudo bem, vamos ao que interessa.&lt;/p&gt;

&lt;p&gt;Bom, essa é uma decisão que venho prolongando há um bom tempo e a decisão está mais do que certa agora. Sempre falava para mim mesmo que iria parar de trabalhar com esse cara, mas eis que chega ao fim a minha parceria com o PHP.&lt;/p&gt;

&lt;p&gt;Pois é. O PHP já foi a minha grande paixão, como linguagem de programação. Só que a vida segue uma evolução natural e não para. É algo contínuo. A medida em que você vai estudando e se dedicando a determinadas tecnologias, acaba por deixar de lado outras tecnologias. No meu caso, é impossível manter contínua e sucessivamente os estudos com todas as tecnologias que eu aprecio e admiro.&lt;/p&gt;

&lt;p&gt;Mas, por que isso Vitor?&lt;/p&gt;

              &lt;h2 id=&quot;Então-senta-que-lá-vem-a-história&quot;&gt;
                &lt;a name=&quot;Então-senta-que-lá-vem-a-história&quot; href=&quot;#Então-senta-que-lá-vem-a-história&quot;&gt;&lt;/a&gt;Então, senta que lá vem a história
              &lt;/h2&gt;
            
&lt;p&gt;Quem me conhece, sabe o quanto sou &lt;strong&gt;viciado&lt;/strong&gt; em programação e tecnologia. Por um tempo esse vício ficou escondido e deu lugar a outro vício, a música. Mas parece que o destino queria mesmo que eu fosse um &lt;strong&gt;Code Geek&lt;/strong&gt;. LOL!&lt;/p&gt;

&lt;p&gt;Enfim, cá estou, tomando uma decisão importante e que me dará mais tempo e &lt;strong&gt;foco&lt;/strong&gt; para estudar as linguagens que considero mais apropriadas e prioritárias atualmente (JavaScript e Ruby).&lt;/p&gt;

&lt;p&gt;Como tudo na minha vida, a curiosidade sempre foi meu ponto forte. Com o PHP, não foi diferente. Estudei e me empenhei em aprendar a linguagem e tudo o que rodeava a mesma durante o tempo em que estive em contato com ela (por conta própria). E o engraçado disso tudo é que eu não aturava Ruby e não queria largar do PHP. Loucura, não é?&lt;/p&gt;

&lt;p&gt;As lembranças de quando comecei a estudar PHP ainda na faculdade, onde a maioria dos colegas queria estudar ASP, vai ficar na memória para sempre. De um lado era a turma que curtia Linux (PHP), do outro lado a turma que curtia o Windows (ASP).&lt;/p&gt;

&lt;p&gt;Não reprimo a linguagem e AINDA BEM que optei por estudá-la. Tive uma compreensão muito maior sobre OOP, MVC, Design Patterns, Arquitetura e tantos outros aspéctos para um bom desenvolvimento de projetos web graças ao PHP.&lt;/p&gt;

&lt;p&gt;Mas, como já diz o ditado: &amp;quot;Nada é para sempre&amp;quot;.&lt;/p&gt;

&lt;p&gt;Aprendi a amar Ruby e, com isso, o PHP foi ficando para trás. Há muito tempo não me empenho nos estudos para com o PHP. Perdi o tesão em levar os estudos para frente. O único resquício será por conta do WordPress, o qual continuarei a trabalhar como CMS para alguns projetos até ser substituído por uma solução própria em Ruby. Eu, sinceramente, pensei que o Laravel seria capaz de reacender essa vontade em trabalhar com PHP novamente. Só que não foi o suficiente, apesar de ser um excelente framework (assim como o Zend e cakePHP, os quais tive oportunidade em trabalhar por algum tempo).&lt;/p&gt;

&lt;p&gt;Pois bem! Daqui pra frente, o caminho será Ruby e JavaScript. Obviamente, incluindo as tecnologias envolvidas e as quais já utilizo com estas duas linguagens de programação que sou extremamente apaixonado.&lt;/p&gt;

              &lt;h2 id=&quot;E-os-experimentos-Vitor-&quot;&gt;
                &lt;a name=&quot;E-os-experimentos-Vitor-&quot; href=&quot;#E-os-experimentos-Vitor-&quot;&gt;&lt;/a&gt;E os experimentos, Vitor?
              &lt;/h2&gt;
            
&lt;p&gt;Alguns experimentos continuarão. Seja com Haskell, Go e Erlang. Caso você se interesse, poderá seguir todos os experimentos que realizo com as linguagens que estou envolvido atualmente, &lt;a href=&quot;https://github.com/vitorbritto/labs&quot;&gt;neste repositório&lt;/a&gt;. Por outro lado, terei de adiar os experimentos com a robótica (RasPI + NodeJS) por mais algum tempo. Segue &lt;a href=&quot;https://github.com/vitorbritto/robotscripts&quot;&gt;outro repositório&lt;/a&gt;, com muito material interessante relacionado ao tema.&lt;/p&gt;

              &lt;h2 id=&quot;E-lembre-se-&quot;&gt;
                &lt;a name=&quot;E-lembre-se-&quot; href=&quot;#E-lembre-se-&quot;&gt;&lt;/a&gt;E lembre-se...
              &lt;/h2&gt;
            
&lt;p&gt;Essa escolha foi baseada em experiências que obtive durante os anos em contato com o PHP. Ponderei as frustrações e satisfações, pesei o seu uso quanto a minha rotina de trabalho e qual impacto isso traria para o meu Workflow. Não foi pelo simples fato de &amp;quot;não gostar&amp;quot;. Não! Levei em consideração muitos fatores para chegar nessa decisão. E, posso dizer que, não foi fácil!&lt;/p&gt;

&lt;p&gt;Mas, para todos os efeitos, o Ruby se mostrou mais presente e promissor. Isso significa que Ruby é melhor que PHP? Não! O Ruby se adaptou melhor a maneira como trabalho e aos projetos que desenvolvo atualmente. E por que faço questão em deixar isso claro?&lt;/p&gt;

&lt;p&gt;Bom, se tem algo que sou contra é quando alguém faz cultos de adoração à determinadas tecnologias. Isso é pior que religião. Traçar &amp;quot;vantagens x desvantagens&amp;quot; e fazer comparativos infantis é pior que o apocalipse. IMHO, é preciso estudar e entender quais as vantagens e desvantagens com base nos seus conceitos. Ou seja meu caro, tire suas próprias conclusões!&lt;/p&gt;

&lt;p&gt;A sua opinião sobre linguagem X, pode ser completamente diferente da minha (e vice-versa). E quem está certo ou errado? Nenhum dos dois está certo e ambos estarão errados se for para gerar opiniões tendenciosas e/ou uma discussão sem fim.&lt;/p&gt;

&lt;p&gt;Você precisa estar preparado para três pontos importantes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estudar as possibilidades existentes, dentro da sua realidade e necessidade, e decidir por sí só qual deve utilizar.&lt;/li&gt;
&lt;li&gt;Estar preparado para conviver com opiniões alheias e que não refletem o seu ponto de vista.&lt;/li&gt;
&lt;li&gt;Entender que não existe &lt;strong&gt;melhor&lt;/strong&gt; ou &lt;strong&gt;pior&lt;/strong&gt;, &lt;strong&gt;certo&lt;/strong&gt; ou &lt;strong&gt;errado&lt;/strong&gt;. É o melhor e certo &lt;strong&gt;para você&lt;/strong&gt;! Savvy?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Agradeço por ler o meu relato. Até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Aug 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/aprendi-a-dizer-adeus/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/aprendi-a-dizer-adeus/</guid>
      </item>
    
      <item>
        <title>Controlando processos no UNIX</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;Vamos combinar que é muito chato quando um programa/aplicação trava ou você não é possível finalizar um procedimento por conta da lentidão na execução de uma terafa no sistema. Para contornar esta situação e conseguirmos manipular os programas, vamos entender o que são os processos no Unix.&lt;/p&gt;

              &lt;h3 id=&quot;Processando&quot;&gt;
                &lt;a name=&quot;Processando&quot; href=&quot;#Processando&quot;&gt;&lt;/a&gt;Processando
              &lt;/h3&gt;
            
&lt;p&gt;No Unix, é possível iniciar e interromper processos, enviar sinais aos programas em execução, verificar informações dos processos que estão sendo executados e muito mais. Mas, antes de entendermos como fazer isso, é preciso entender o que é um processo.&lt;/p&gt;

&lt;p&gt;De forma simplificada, um processo é uma instância de um programa em execução. Logo ao iniciar o seu sistema, um processo chamado &lt;em&gt;init&lt;/em&gt; é executado com um PID de número &lt;strong&gt;1&lt;/strong&gt;. Para cada programa iniciado é atribuido um identificador único, o qual denominamos &lt;em&gt;PID&lt;/em&gt;(process identifier). Não vou entrar em detalhes sobre como cada processo é iniciado por debaixo dos panos. Para isto, leia &lt;a href=&quot;http://en.wikipedia.org/wiki/Process_identifier&quot;&gt;este material&lt;/a&gt; que pode ser encontrado no Wikipedia.&lt;/p&gt;

&lt;p&gt;Sendo assim, ao executar um comando no prompt do Unix shell ou inicializar um programa/aplicativo você está iniciando um processo.&lt;/p&gt;

              &lt;h3 id=&quot;Quais-processos-estão-em-execução-&quot;&gt;
                &lt;a name=&quot;Quais-processos-estão-em-execução-&quot; href=&quot;#Quais-processos-estão-em-execução-&quot;&gt;&lt;/a&gt;Quais processos estão em execução?
              &lt;/h3&gt;
            
&lt;p&gt;Para verificar quais processos estão em execução, basta executar o comando &lt;em&gt;ps&lt;/em&gt; (process status). Quando declarado sem qualquer argumento, o comando &lt;em&gt;ps&lt;/em&gt; exibe todos os processos vinculados com a sessão atual do seu sistema.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Confira o exemplo abaixo:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  PID TTY           TIME CMD
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt; &lt;span class=&quot;m&quot;&gt;2092&lt;/span&gt; ttys000    0:00.97 -bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note que neste exemplo, o comando &lt;em&gt;ps&lt;/em&gt; exibe o ID do processo, em qual terminal o processo está vinculado, o tempo acumulado que este processo encontra-se em execução e o comando para este processo respectivamente.&lt;/p&gt;

&lt;p&gt;Além disso, este comando é muito útil para verificar quais processos estão sendo executados em um sistema e quais consomem mais memória ou estão exigindo um uso excessivo da CPU.&lt;/p&gt;

&lt;p&gt;Então, vamos entender melhor a mecânica por trás do comando &lt;em&gt;ps&lt;/em&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Um-passo-de-cada-vez&quot;&gt;
                &lt;a name=&quot;Um-passo-de-cada-vez&quot; href=&quot;#Um-passo-de-cada-vez&quot;&gt;&lt;/a&gt;Um passo de cada vez
              &lt;/h3&gt;
            
&lt;p&gt;O comando &lt;em&gt;ps&lt;/em&gt; é um dos mais comuns e utilizados no/pelo Unix, mas oferece algumas diferenças de sintaxe para renderizar o output em seus variantes (flavors). A melhor maneira de entender como a sintaxe do &lt;em&gt;process status&lt;/em&gt; funciona no seu sistema, é utilizando o &lt;strong&gt;man pages&lt;/strong&gt;. Para facilitar a leitura, adicione e utilize o &lt;em&gt;alias&lt;/em&gt; abaixo para ler em formato PDF o manual do &lt;em&gt;ps&lt;/em&gt;. Se preferir, execute da maneira mais prática e convencional com: &lt;code&gt;man ps&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# Insira no .bashrc:&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;manpdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;man -t $1 | pstopdf -i -o $1.pdf&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# Execute com:&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;manpdf ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; o arquivo PDF para o man page do &lt;em&gt;ps&lt;/em&gt; será registrado no diretório corrente do terminal onde o &lt;em&gt;alias&lt;/em&gt; for executado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aí esta! Uma maneira prática para ler a respeito dos detalhes sobre o comando &lt;em&gt;ps&lt;/em&gt; no seu sistema. E outros comandos também, por que não? :)&lt;/p&gt;

              &lt;h3 id=&quot;Mergulhando-nos-processos&quot;&gt;
                &lt;a name=&quot;Mergulhando-nos-processos&quot; href=&quot;#Mergulhando-nos-processos&quot;&gt;&lt;/a&gt;Mergulhando nos processos
              &lt;/h3&gt;
            
&lt;p&gt;Daqui para frente, vamos percorrer os seguintes tópicos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;States (estados)&lt;/li&gt;
&lt;li&gt;System process (processos do sistema)&lt;/li&gt;
&lt;li&gt;Attributes (atributos)&lt;/li&gt;
&lt;li&gt;Kill Process (matar processo)&lt;/li&gt;
&lt;li&gt;Tree Process (árvore de processos)&lt;/li&gt;
&lt;li&gt;Comando &lt;code&gt;top&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota Importante:&lt;/strong&gt; estou usando o Bash. :)&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h4 id=&quot;Estados&quot;&gt;
                &lt;a name=&quot;Estados&quot; href=&quot;#Estados&quot;&gt;&lt;/a&gt;Estados
              &lt;/h4&gt;
            
&lt;p&gt;Para saber em qual estado o seu sistema se encontra, utilize o comando &lt;code&gt;ps&lt;/code&gt; com o argumento &lt;code&gt;u&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Confira o exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps u
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;USER         PID    %CPU %MEM VSZ       RSS  TTY   STAT STARTED   TIME COMMAND
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;vitorbritto  &lt;span class=&quot;m&quot;&gt;2092&lt;/span&gt;   0.0  0.1  &lt;span class=&quot;m&quot;&gt;2437540&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;2924&lt;/span&gt; s000  S     5:39PM   0:01.20 -bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perceba que o comando retorna uma série de informações a respeito do sistema no output (terminal), como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O usuário que executa o processo (USER)&lt;/li&gt;
&lt;li&gt;O identificador do processo (PID)&lt;/li&gt;
&lt;li&gt;A percentagem de uso do CPU (%CPU)&lt;/li&gt;
&lt;li&gt;A percentagem de uso real da memória (%MEM)&lt;/li&gt;
&lt;li&gt;O tamanho da memória virtual em KBs (VSZ)&lt;/li&gt;
&lt;li&gt;O tamanho de memória física usada (RSS)&lt;/li&gt;
&lt;li&gt;O terminal que o processo esá conectado (TTY)&lt;/li&gt;
&lt;li&gt;Os estados atrelados ao processo (STAT)&lt;/li&gt;
&lt;li&gt;Quando o processo foi iniciado (STARTED)&lt;/li&gt;
&lt;li&gt;A quantidade de tempo utilizado pelo processo no CPU (TIME)&lt;/li&gt;
&lt;li&gt;E o nome do comando (COMMAND)&lt;/li&gt;
&lt;/ul&gt;

              &lt;h4 id=&quot;Processos-do-Sistema&quot;&gt;
                &lt;a name=&quot;Processos-do-Sistema&quot; href=&quot;#Processos-do-Sistema&quot;&gt;&lt;/a&gt;Processos do Sistema
              &lt;/h4&gt;
            
&lt;p&gt;Por padrão, o seu sistema possui diversos processos em execução, para conferir uma lista detalhada de quais processos encontram-se em execução neste exato momento no seu sistema, digite: &lt;code&gt;ps ax&lt;/code&gt;. Para o nosso exemplo, vamos digitar o seguinte: &lt;code&gt;ps ax | wc -l&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Show de bola, Vitor! Digitei o comando e me retornou um número.&lt;/p&gt;

&lt;p&gt;Pois bem! Este número representa a quantidade de processos em execução no seu sistema. Agora, vamos desmembrar este comando para que você possa entender o propósito de cada elemento nele.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O argumento &lt;code&gt;a&lt;/code&gt; do comando &lt;code&gt;ps&lt;/code&gt; retorna informações dos processos de todos os usuários.&lt;/li&gt;
&lt;li&gt;O argumento &lt;code&gt;x&lt;/code&gt; do comando &lt;code&gt;ps&lt;/code&gt; renderiza informações a respeito dos processos sem controlar o terminal.&lt;/li&gt;
&lt;li&gt;O caracter &lt;code&gt;|&lt;/code&gt; é o que chamamos de &lt;em&gt;pipe&lt;/em&gt;. É um operador capaz de repassar uma informação a partir do &lt;em&gt;output&lt;/em&gt; de um comando para o &lt;em&gt;input&lt;/em&gt; de outro comando.&lt;/li&gt;
&lt;li&gt;O segundo comando &lt;code&gt;wc -l&lt;/code&gt; é responsável por renderizar o total de processos em execução no seu sistema.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Já que este artigo não se trata do operador &lt;code&gt;|&lt;/code&gt; (pipe) e do comando &lt;code&gt;wc&lt;/code&gt; (e seus respectivos argumentos), recomendo a leitura de suas man pages. É uma ótima oportunidade para gerar um PDF, não é? :)&lt;/p&gt;

&lt;p&gt;Pois bem. Os procesos são programas em execução e que lidam com aspectos essenciais de manipulação e manutenção no seu sistema. Muitos destes processos são, convencionalmente, chamados de &lt;em&gt;daemons&lt;/em&gt; e eles executam algumas rotinas. Digite o comando a seguir para visualizar quais processos estão em execução no seu sistema:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps ax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Será retornada uma lista similar a esta:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps ax
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  PID   TT  STAT      TIME COMMAND
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;   ??  Ss     0:48.81 /sbin/launchd
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;   ??  Ss     0:01.99 /usr/libexec/kextd
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;   ??  Ss     0:02.91 /usr/libexec/UserEventAgent -l System
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;   ??  Ss     0:03.60 /usr/sbin/notifyd
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;   ??  Ss     0:06.54 /usr/sbin/ntpd -c /private/etc/ntp-restrict.conf -n -g -p /var/run/ntpd.pid -f /var/db/ntp.drift
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt;   ??  SNs    0:00.92 /usr/libexec/warmd
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;   ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; a lista acima foi renderizada em um Mac OSX.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h4 id=&quot;Atributos-do-Processo&quot;&gt;
                &lt;a name=&quot;Atributos-do-Processo&quot; href=&quot;#Atributos-do-Processo&quot;&gt;&lt;/a&gt;Atributos do Processo
              &lt;/h4&gt;
            
&lt;p&gt;Cada processo possui um ambiente com diversos atributos, assim como argumentos para a linha de comando, variáveis do ambiente, descrição dos arquivos, mascara para criação de arquivos e muito mais.&lt;/p&gt;

&lt;p&gt;Para verificar determinados atributos dos processos, você pode executar o comando &lt;em&gt;ps&lt;/em&gt; com a flag &lt;code&gt;-o&lt;/code&gt; e os atributos desejados. Veja o exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps -o user,pid,stime,comm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;E será renderizado isto:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps -o user,pid,stime,comm
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;USER          PID     STIME COMM
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;vitorbritto  &lt;span class=&quot;m&quot;&gt;2092&lt;/span&gt;   0:00.54 -bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confira uma tabela dos atributos mais comuns disponíveis no Unix.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; alguns destes atributos foram mencionados no tópico &lt;a href=&quot;#estados&quot;&gt;estados&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Campo&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;Usuário do processo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pid&lt;/td&gt;
&lt;td&gt;ID do processo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ppid&lt;/td&gt;
&lt;td&gt;ID do processo filho&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pcpu&lt;/td&gt;
&lt;td&gt;Percentagem de uso do CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rss&lt;/td&gt;
&lt;td&gt;Tamanho de memória física usada (em kilobytes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pmem&lt;/td&gt;
&lt;td&gt;Percentagem de uso real da memória&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vsz&lt;/td&gt;
&lt;td&gt;Tamanho da memória virtual em KBs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tty&lt;/td&gt;
&lt;td&gt;Terminal que o processo esá conectado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;state (ou s)&lt;/td&gt;
&lt;td&gt;Estado atrelado ao processo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stime&lt;/td&gt;
&lt;td&gt;Quando o processo foi iniciado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;Quantidade de tempo utilizado pelo processo no CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;command (ou comm)&lt;/td&gt;
&lt;td&gt;Nome do comando&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

              &lt;h4 id=&quot;Finalizando-um-processo&quot;&gt;
                &lt;a name=&quot;Finalizando-um-processo&quot; href=&quot;#Finalizando-um-processo&quot;&gt;&lt;/a&gt;Finalizando um processo
              &lt;/h4&gt;
            
&lt;p&gt;É possível finalizar um processo de algumas maneiras. O utilitário padrão para &amp;quot;matar&amp;quot; um processo, chama-se &lt;em&gt;kill&lt;/em&gt;. Tecnicamente, o comando &lt;code&gt;kill&lt;/code&gt; não interrompe ou finaliza o processo, isto é feito através de um sinal emitido para o processo. Os sinais (signals) são muito utilizados para a comunicação entre os processos. Cada sinal é responsável por uma ação do &lt;strong&gt;processo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O sinal padrão para o comando &lt;code&gt;kill&lt;/code&gt; é o &lt;em&gt;SIGTERM&lt;/em&gt; (terminar).&lt;/p&gt;

&lt;p&gt;Para finalizar um processo, basta inserir o PID (identificador do processo). Veja o exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;# Primeiro, buscamos o PID que queremos finalizar.
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;# Digamos que o processo a ser finalizado seja o navegador Firefox.
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;# No comando abaixo, passo a flag -o par retornar um output customizado
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;# com o comando e o identificador do processo (PID). Logo após uso o pipe (|)
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;# para repassar a informação com o grep, que funciona como um regex e realizar
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;# uma comparação com a string &amp;quot;firefox&amp;quot;.
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;$ ps axww -o pid,comm | grep firefox
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;  787 /Applications/Firefox.app/Contents/MacOS/firefox
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;# Verificamos que o PID deste comando é 787.
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;# Agora, vamos executar o comando kill para finalizar
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;# este processo utilizando o sinal padrão (SIGTERM).
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;$ kill 787
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Com o comando &lt;code&gt;kill -l&lt;/code&gt;, é possível renderizar no terminal os possíveis sinais com os seus respectivos números. Veja um exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;$ kill -l
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt; 1) SIGHUP       2) SIGINT       3) SIGQUI       4) SIGILL
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt; 5) SIGTRAP      6) SIGABRT      7) SIGEMT       8) SIGFPE
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt; 9) SIGKILL     10) SIGBUS      11) SIGSEGV     12) SIGSYS
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;13) SIGPIPE     14) SIGALRM     15) SIGTERM     16) SIGURG
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;17) SIGSTOP     18) SIGTSTP     19) SIGCONT     20) SIGCHLD
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;21) SIGTTIN     22) SIGTTOU     23) SIGIO       24) SIGXCPU
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;25) SIGXFSZ     26) SIGVTALRM   27) SIGPROF     28) SIGWINCH
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;29) SIGINFO     30) SIGUSR1     31) SIGUSR2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Muitos sistemas Unix fornecem alternativas ao comando &lt;code&gt;kill&lt;/code&gt; e que podem ser utilizados com o nome do comando ao invés do PID, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pgrep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkill&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;killall&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em alguns sistemas, o &lt;code&gt;killall&lt;/code&gt; é utilizado para enviar sinais aos processos através de nomes. Tenha cuidado ao utilizar este cara, recomendo o uso do &lt;code&gt;pkill&lt;/code&gt;. Desta forma, ao invés de utilizar o ID do processo (PID), você utilizaria o nome do processo.
Veja abaixo um exemplo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pkill firefox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O argumento utilizado no &lt;code&gt;pkill&lt;/code&gt; é uma simples expressão regular a ser comparada. Mesmo assim, antes de usar o &lt;code&gt;pkill&lt;/code&gt;, certifique-se de que a expressão existe com o &lt;code&gt;pgrep&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; no Mac OSX, tais comandos não são nativos. Você pode usar o homebrew para instalar o &lt;a href=&quot;http://proctools.sourceforge.net/&quot;&gt;proctools&lt;/a&gt; com o comando &lt;code&gt;brew install proctools&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h4 id=&quot;Árvore-de-Processos&quot;&gt;
                &lt;a name=&quot;Árvore-de-Processos&quot; href=&quot;#Árvore-de-Processos&quot;&gt;&lt;/a&gt;Árvore de Processos
              &lt;/h4&gt;
            
&lt;p&gt;Sem dúvidas, este é um dos comandos mais interessantes sobre processos. O &lt;code&gt;pstree&lt;/code&gt; permite que uma estrutura hierárquica seja renderizada no terminal, onde cada processo filho (child process) é relacionado ao seu processo pai (parent process).&lt;/p&gt;

&lt;p&gt;Infelizmente, no OSX é preciso instalar este utilitário também. Veja o exemplo abaixo como podemos instalar este camarada com o &lt;em&gt;homebrew&lt;/em&gt; e a sua posterior visualização no terminal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# 1. Instale com:&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install pstree
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# 2. Execute com:&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pstree
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# 3. O resultado (parcial) será:&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pstree
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;-+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00001&lt;/span&gt; root /sbin/launchd
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00010&lt;/span&gt; root /usr/libexec/kextd
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00011&lt;/span&gt; root /usr/libexec/UserEventAgent -l System
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00012&lt;/span&gt; root /usr/sbin/notifyd
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00014&lt;/span&gt; root /usr/sbin/ntpd -c /private/etc/ntp-restrict.conf -n -g -p /var/run/ntpd.pid -f /var/db/ntp.drift
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00017&lt;/span&gt; nobody /usr/libexec/warmd
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00018&lt;/span&gt; _usbmuxd /System/Library/PrivateFrameworks/MobileDevice.framework/Versions/A/Resources/usbmuxd -launchd
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;--&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;00020&lt;/span&gt; root /usr/sbin/syslogd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Certamente, é possível escrever um programa em Shell Script para renderizar uma &lt;code&gt;tree&lt;/code&gt; de acordo com as suas necessidades. Não entraremos em detalhes sobre como realizar este procedimento, para não perdermos o foco deste artigo, mas fique a vontade para realizar algumas pesquisas. Ok?&lt;/p&gt;

              &lt;h4 id=&quot;Comando-&lt;code&gt;top&lt;-code&gt;&quot;&gt;
                &lt;a name=&quot;Comando-&lt;code&gt;top&lt;-code&gt;&quot; href=&quot;#Comando-&lt;code&gt;top&lt;-code&gt;&quot;&gt;&lt;/a&gt;Comando &lt;code&gt;top&lt;/code&gt;
              &lt;/h4&gt;
            
&lt;p&gt;Este é outro comando muito interessante. Principalmente para administradores Unix.&lt;/p&gt;

&lt;p&gt;Com o comando &lt;code&gt;top&lt;/code&gt; é possível iniciar um utilitário interativo para análise dos processos, os quais são atualizados frequentemente e mostram informações físicas e virtuais da memória, CPU e processos lentos/travados (&lt;a href=&quot;http://en.wikipedia.org/wiki/Zombie_process&quot;&gt;Zombie Process&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Confira um exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;Processes: &lt;span class=&quot;m&quot;&gt;75&lt;/span&gt; total, &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; running, &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; stuck, &lt;span class=&quot;m&quot;&gt;69&lt;/span&gt; sleeping, &lt;span class=&quot;m&quot;&gt;494&lt;/span&gt; threads                                                                                            03:35:56
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;Load Avg: 3.99, 3.51, 3.28  CPU usage: 66.8% user, 24.56% sys, 9.34% idle    SharedLibs: 2472K resident, 2260K data, 0B linkedit.
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;MemRegions: &lt;span class=&quot;m&quot;&gt;34948&lt;/span&gt; total, 642M resident, 17M private, 272M shared. PhysMem: 330M wired, 869M active, 834M inactive, 2034M used, 14M free.
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;VM: 187G vsize, 1101M framework vsize, 858219&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; pageins, 546183&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; pageouts. Networks: packets: 2578121/4689M in, 2119681/2093M out.
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;Disks: 564676/9683M &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;, 289083/12G written.
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;PID   COMMAND      %CPU  TIME     &lt;span class=&quot;c&quot;&gt;#TH  #WQ  #POR #MREGS RPRVT  RSHRD  RSIZE  VPRVT  VSIZE  PGRP PPID STATE    UID  FAULTS     COW      MSGSENT    MSGRECV&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;3495&lt;/span&gt;  top          16.9  00:04.34 1/1  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;     1368K  216K   2076K  17M    2378M  &lt;span class=&quot;m&quot;&gt;3495&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2092&lt;/span&gt; running  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    9727+      &lt;span class=&quot;m&quot;&gt;85&lt;/span&gt;       1294936+   647425+
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;3494&lt;/span&gt;  taskgated    0.0   00:00.03 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;     380K   272K   1740K  20M    2381M  &lt;span class=&quot;m&quot;&gt;3494&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    sleeping &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;577&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;106&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;116&lt;/span&gt;        48
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;3479&lt;/span&gt;  ocspd        0.0   00:00.04 &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;     676K   276K   2100K  26M    2387M  &lt;span class=&quot;m&quot;&gt;3479&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    sleeping &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;749&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;98&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;185&lt;/span&gt;        77
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;3377&lt;/span&gt;  distnoted    0.0   00:00.01 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;46&lt;/span&gt;     392K   240K   1012K  22M    2383M  &lt;span class=&quot;m&quot;&gt;3377&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3374&lt;/span&gt; sleeping &lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;413&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;83&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;        124
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;3376&lt;/span&gt;  mdworker     0.0   00:00.36 &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;54&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;71&lt;/span&gt;     1492K  3748K  5632K  23M    2412M  &lt;span class=&quot;m&quot;&gt;3376&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3374&lt;/span&gt; sleeping &lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;2623&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;203&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;1702&lt;/span&gt;       757
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;3374&lt;/span&gt;  launchd      0.0   00:00.02 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;53&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;     368K   416K   784K   38M    2399M  &lt;span class=&quot;m&quot;&gt;3374&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    sleeping &lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;602&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;179&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;1254&lt;/span&gt;       523
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;2482&lt;/span&gt;  Mou          0.0   22:13.93 &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;174&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;480&lt;/span&gt;    10M    12M    31M    301M   19G    &lt;span class=&quot;m&quot;&gt;2482&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;369777&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;596&lt;/span&gt;      4043593+   2069826+
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;2447- node-webkit  17.6  69:54.83 4/2  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;78&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;472&lt;/span&gt;    10M+   40M-   39M+   75M+   807M   &lt;span class=&quot;m&quot;&gt;2443&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2443&lt;/span&gt; running  &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  138640191+ &lt;span class=&quot;m&quot;&gt;690&lt;/span&gt;      2239122+   1119229+
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;2445- node-webkit  110.2 06:01:21 28/1 &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    137- 913-   145M+  36M    410M+  687M-  1426M- &lt;span class=&quot;m&quot;&gt;2443&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2443&lt;/span&gt; running  &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  1889563+   &lt;span class=&quot;m&quot;&gt;838&lt;/span&gt;      259273383+ 133231723+
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;2443- node-webkit  10.9  43:43.71 &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;266&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;382&lt;/span&gt;    3204K  37M    19M+   341M   1102M  &lt;span class=&quot;m&quot;&gt;2443&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  stuck    &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  168935+    &lt;span class=&quot;m&quot;&gt;1219&lt;/span&gt;     41720371+  16962182+
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;2421&lt;/span&gt;  Preview      0.0   01:35.89 &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;185&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;895&lt;/span&gt;    12M    24M    34M    222M   3708M  &lt;span class=&quot;m&quot;&gt;2421&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;196129&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;745&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;380311&lt;/span&gt;     187637
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;2092&lt;/span&gt;  bash         0.0   00:01.46 &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;     1268K  216K   1668K  19M    2380M  &lt;span class=&quot;m&quot;&gt;2092&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2091&lt;/span&gt; sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;15364&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;4346&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;491&lt;/span&gt;        237
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;2091&lt;/span&gt;  login        0.0   00:00.03 &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;34&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;58&lt;/span&gt;     0B     216K   432K   22M    2391M  &lt;span class=&quot;m&quot;&gt;2091&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2089&lt;/span&gt; sleeping &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;748&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;121&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;292&lt;/span&gt;        138
&lt;a name=&quot;line-21&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;2089&lt;/span&gt;  Terminal     1.5   01:04.90 &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;135&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;330&lt;/span&gt;    7376K  9412K  23M    32M    2538M  &lt;span class=&quot;m&quot;&gt;2089&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;115422&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;539&lt;/span&gt;      342779+    165218+
&lt;a name=&quot;line-22&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;1034&lt;/span&gt;  mdworker     0.0   00:47.94 &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;98&lt;/span&gt;     3096K  4116K  8244K  29M    2418M  &lt;span class=&quot;m&quot;&gt;1034&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;126235&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;278&lt;/span&gt;      &lt;span class=&quot;m&quot;&gt;427269&lt;/span&gt;     174393
&lt;a name=&quot;line-23&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;992&lt;/span&gt;   Sparrow      0.0   18:16.79 &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;309&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1955&lt;/span&gt;   51M    17M    67M    418M   3779M  &lt;span class=&quot;m&quot;&gt;992&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1391524&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1828&lt;/span&gt;     6624660+   3008127+
&lt;a name=&quot;line-24&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;885&lt;/span&gt;   plugin-conta 0.0   30:46.44 &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;487&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1344&lt;/span&gt;   1356K  28M    5816K  56M    2725M  &lt;span class=&quot;m&quot;&gt;787&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;787&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;51300527&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;6662&lt;/span&gt;     17404742+  8400203+
&lt;a name=&quot;line-25&quot;&gt;&lt;/a&gt;&lt;span class=&quot;m&quot;&gt;787&lt;/span&gt;   firefox      11.0  04:42:22 &lt;span class=&quot;m&quot;&gt;74&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;339&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;19088&lt;/span&gt;  281M   34M    374M   514M   3563M  &lt;span class=&quot;m&quot;&gt;787&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;137&lt;/span&gt;  sleeping &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;11793724&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;2573162&lt;/span&gt;  498594082+ 245596606+
&lt;a name=&quot;line-26&quot;&gt;&lt;/a&gt;7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Com este &lt;em&gt;overview&lt;/em&gt; sobre processos no Unix, podemos seguir adiante e percorrer alguns aspectos para gerir tais processos. Para isto, vamos entender o que é e como funciona o comando &lt;code&gt;jobs&lt;/code&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Controlando-os-processos&quot;&gt;
                &lt;a name=&quot;Controlando-os-processos&quot; href=&quot;#Controlando-os-processos&quot;&gt;&lt;/a&gt;Controlando os processos
              &lt;/h3&gt;
            
&lt;p&gt;Com o comando &lt;code&gt;jobs&lt;/code&gt;, é possível executar programas em &lt;em&gt;background&lt;/em&gt;. Isso possibilita a execução de múltiplos programas ao mesmo tempo e em paralelo, a suspensão e reinício de determinados comandos também.&lt;/p&gt;

&lt;p&gt;Mas, como posso executar isso Vitor?&lt;/p&gt;

              &lt;h4 id=&quot;Entendendo-melhor-o-comando-jobs&quot;&gt;
                &lt;a name=&quot;Entendendo-melhor-o-comando-jobs&quot; href=&quot;#Entendendo-melhor-o-comando-jobs&quot;&gt;&lt;/a&gt;Entendendo melhor o comando jobs
              &lt;/h4&gt;
            
&lt;p&gt;Você pode, simplesmente, inserir o operador &lt;code&gt;&amp;amp;&lt;/code&gt; ao final do comando que deseja executar. Com isso, o seu processo será executado em &lt;em&gt;background&lt;/em&gt; e o seu &lt;em&gt;prompt&lt;/em&gt; não será travado. Confira o exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm search zip &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neste exemplo, o &lt;code&gt;npm&lt;/code&gt; fará uma busca pelos módulos com o termo &lt;em&gt;zip&lt;/em&gt; e o seu prompt ficará livre para continuar executando demais comandos. Faça um teste. :)&lt;/p&gt;

              &lt;h4 id=&quot;Manipulando-os-processos-em-execução&quot;&gt;
                &lt;a name=&quot;Manipulando-os-processos-em-execução&quot; href=&quot;#Manipulando-os-processos-em-execução&quot;&gt;&lt;/a&gt;Manipulando os processos em execução
              &lt;/h4&gt;
            
&lt;p&gt;Para verificar os processos em execução no &lt;em&gt;background&lt;/em&gt;, basta digitar no terminal o comando &lt;code&gt;jobs&lt;/code&gt;. Será exibida uma lista semelhante a que você verá abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;jobs&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;+ Running        npm search zip &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;É possível mover um processo para o &lt;em&gt;foreground&lt;/em&gt;, mas vale lembrar que este procedimento fará com que o prompt seja travado. Isso impossibilita qualquer ação do usuário até que o processo seja finalizado. Para ver como funciona, execute o seguinte comando no processo em &lt;em&gt;background&lt;/em&gt; recém-criado:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# Colocar no foreground o processo de número 1&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fg &lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; se houverem muitos jobs em execução no &lt;em&gt;background&lt;/em&gt;, é possível passar o número do &lt;em&gt;job&lt;/em&gt; como argumento. Exemplo: &lt;code&gt;fg &amp;lt;número do processo em background&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h4 id=&quot;Acabando-com-a-festa&quot;&gt;
                &lt;a name=&quot;Acabando-com-a-festa&quot; href=&quot;#Acabando-com-a-festa&quot;&gt;&lt;/a&gt;Acabando com a festa
              &lt;/h4&gt;
            
&lt;p&gt;No nosso exemplo temos um processo em execução, no qual está buscando os módulos do node com o termo &lt;em&gt;zip&lt;/em&gt; para renderizar no output (terminal). Entretanto, digamos que este processo esteja atrapalhando o desempenho do seu sistema ou que você não queira que ele prossiga. Para isso, podemos utilizar dois métodos para interromper este processo.&lt;/p&gt;

&lt;p&gt;No primeiro método, tratando-se de um processo no &lt;em&gt;foreground&lt;/em&gt;, é possível suspender o mesmo com a combinação &lt;code&gt;CTRL+Z&lt;/code&gt;. Do contrário, se for um processo no &lt;em&gt;background&lt;/em&gt;, execute o comando &lt;code&gt;kill&lt;/code&gt; adicionando o caracter &lt;code&gt;%&lt;/code&gt; precedido do número do &lt;em&gt;job&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por exemplo: &lt;code&gt;kill -18 %2&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; vale lembrar que o &lt;code&gt;-18&lt;/code&gt; não é um número negativo, e sim a representação do sinal a ser passado para o processo. neste caso, o sinal de número 18 (SIGTSTP - Signal Stop).&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h3 id=&quot;Por-enquanto-é-isso&quot;&gt;
                &lt;a name=&quot;Por-enquanto-é-isso&quot; href=&quot;#Por-enquanto-é-isso&quot;&gt;&lt;/a&gt;Por enquanto é isso
              &lt;/h3&gt;
            
&lt;p&gt;Podemos perceber o quão importante os processos são em um sistema e como podemos manipular/generenciar estes caras a fim de manter um bom desempenho neste ambiente.&lt;/p&gt;

&lt;p&gt;Vimos também que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Processos são simples inicializações de programas com uma única referência ao processo por um ID (PID).&lt;/li&gt;
&lt;li&gt;Os processos possuem processos pai e processos filho (parent e child process).&lt;/li&gt;
&lt;li&gt;As informações de um processo podem ser renderizadas no terminal com o comando &lt;code&gt;ps&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Podemos realizar diagnósticos em tempo real com o comando &lt;code&gt;top&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Conseguimos uma visualização mais elegante dos processos com o utilitário &lt;code&gt;pstree&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Sinais são utilizados como métodos para estabelecer uma comunicação entre os processos.&lt;/li&gt;
&lt;li&gt;O comando &lt;code&gt;kill&lt;/code&gt; é o utilitário padrão para finalizar processos a partir de sinais. O sinal padrão é o &lt;strong&gt;SIGTERM&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;O Unix shell fornece uma maneira simples para realizar multi-tarefas em &lt;em&gt;background&lt;/em&gt; e em paralelo, adicionando um caracter &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) ao final do comando.&lt;/li&gt;
&lt;li&gt;Podemos gerenciar os procesos em &lt;em&gt;background&lt;/em&gt; com o comando &lt;code&gt;jobs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Com o comando &lt;code&gt;kill&lt;/code&gt;, podemos suspender um processo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para facilitar em futuras pesquisas, segue uma lista com alguns dos termos relacionados/utilizados neste artigo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Comandos:&lt;/strong&gt; &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;kill&lt;/code&gt;, &lt;code&gt;killall&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;pgrep&lt;/code&gt;, &lt;code&gt;pkill&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;wc&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;pstree&lt;/code&gt;, &lt;code&gt;jobs&lt;/code&gt;, &lt;code&gt;bg&lt;/code&gt;, &lt;code&gt;fg&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processos:&lt;/strong&gt; Child Process &lt;strong&gt;e&lt;/strong&gt; Parent Process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Atributos:&lt;/strong&gt; UID, PID, RSS, STAT, COMM, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sinais:&lt;/strong&gt; SIGTERM, SIGKILL, SIGSTP, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jobs:&lt;/strong&gt; &lt;em&gt;background&lt;/em&gt; e &lt;em&gt;foreground&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

              &lt;h3 id=&quot;Mas-não-para-por-aí-&quot;&gt;
                &lt;a name=&quot;Mas-não-para-por-aí-&quot; href=&quot;#Mas-não-para-por-aí-&quot;&gt;&lt;/a&gt;Mas não para por aí!
              &lt;/h3&gt;
            
&lt;p&gt;Lembre-se de que este artigo não cobre todos os detalhes sobre processos. A ideia foi passar um &lt;em&gt;overview&lt;/em&gt;, mas com um certo nível de detalhes sobre processos no Unix. Recomendo a leitura do livro &lt;a href=&quot;http://www.jstorimer.com/products/working-with-unix-processes&quot;&gt;Working with UNIX Processes&lt;/a&gt; do Jesse Storimer.&lt;/p&gt;

&lt;p&gt;Além disso, para injetarmos um pouco de JavaScript nesta caminhada, farei uma continuação deste artigo sobre como os processos e sinais podem ser executados no NodeJS. Assim, veremos como os módulos nativos e os objetos existentes nesta plataforma podem ser úteis para controlar/manipular melhor a nossa aplicação. Combinado?&lt;/p&gt;

&lt;p&gt;Até a próxima! =]&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Jul 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/controlando-processos-no-unix/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/controlando-processos-no-unix/</guid>
      </item>
    
      <item>
        <title>Adicionando caminhos na variável de ambiente PATH</title>
        <description>&lt;p&gt;Saudações!&lt;/p&gt;

&lt;p&gt;É comum instalarmos novos programas/plataformas em nosso sistema e precisarmos inicializar o seu binário através da variável de ambiente PATH no Shell. Certamente, inserir este caminho precisará de um pequeno esforço manual/braçal para que o programa seja iniciado corretamente.&lt;/p&gt;

&lt;p&gt;A seguir, mostro como adicionar novos &lt;em&gt;paths&lt;/em&gt; ao Shell e, para exemplificar este cenário, estarei utilizando como base o &lt;strong&gt;Bash&lt;/strong&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Entendendo-o-cenário&quot;&gt;
                &lt;a name=&quot;Entendendo-o-cenário&quot; href=&quot;#Entendendo-o-cenário&quot;&gt;&lt;/a&gt;Entendendo o cenário
              &lt;/h3&gt;
            
&lt;p&gt;Para que o caminho (path) seja adicionado a variável de ambiente PATH, podemos fazê-lo por dois meios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;append&lt;/em&gt;: &lt;code&gt;PATH=$PATH:~/opt/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;prepend&lt;/em&gt;: &lt;code&gt;PATH=~/opt/bin:$PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Qual seria a diferença entre eles?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basicamente, ao fazer um &lt;code&gt;append&lt;/code&gt; no PATH, o caminho será procurado depois de todos os outros diretórios. É indicado para o caso de haver um programa com o mesmo nome em vários diretórios. E, ao fazer um &lt;code&gt;prepend&lt;/code&gt; no PATH, o caminho será pesquisado antes de todos os outros diretórios.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; você pode conferir mais detalhes sobre &lt;code&gt;append&lt;/code&gt; e &lt;code&gt;prepend&lt;/code&gt; no PATH, &lt;a href=&quot;http://www.troubleshooters.com/linux/prepostpath.htm&quot;&gt;neste artigo (em inglês)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É possível também adicionar várias entradas ao mesmo tempo.&lt;/p&gt;

&lt;p&gt;Veja no exemplo abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:~/opt/bin:~/opt/node/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perceba que o caracter &lt;code&gt;:&lt;/code&gt; demarca o fim/início de cada caminho.&lt;/p&gt;

              &lt;h3 id=&quot;Registrando-meus-&lt;em&gt;paths&lt;-em&gt;&quot;&gt;
                &lt;a name=&quot;Registrando-meus-&lt;em&gt;paths&lt;-em&gt;&quot; href=&quot;#Registrando-meus-&lt;em&gt;paths&lt;-em&gt;&quot;&gt;&lt;/a&gt;Registrando meus &lt;em&gt;paths&lt;/em&gt;
              &lt;/h3&gt;
            
&lt;p&gt;Bom, você pode registrar os seus caminhos tanto no arquivo &lt;code&gt;~/.bash_profile&lt;/code&gt; quanto no arquivo &lt;code&gt;~/.bashrc&lt;/code&gt;. Entrentanto, vale entender as diferenças entre eles e porque, em alguns casos, os seus &lt;em&gt;paths&lt;/em&gt; não são iniciados.&lt;/p&gt;

&lt;p&gt;O arquivo &lt;code&gt;.bash_profile&lt;/code&gt; é executado para shells com usuários autenticados. Já o &lt;code&gt;.bashrc&lt;/code&gt; é executado em shells interativos e usuários não autenticados.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agora me perdi, explica melhor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vamos lá. Quando você faz uma autenticação (digitando o usuário e senha) através do console, seja local ou remoto (via SSH), o arquivo &lt;code&gt;.bash_profile&lt;/code&gt; é utilizado para configurar o shell antes do prompt ser inicializado. Entretanto, se você já estiver logado no sistema e abrir um novo terminal, então o &lt;code&gt;.bashrc&lt;/code&gt; será executado. O arquivo &lt;code&gt;.bashrc&lt;/code&gt; é também iniciado quando você executa uma nova instância bash no terminal (não autenticado), digitando &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; vale lembrar que temos uma exceção no OSX onde, por padrão, cada nova instância iniciada no terminal executa o shell com usuário autenticado, chamando o &lt;code&gt;.bash_profile&lt;/code&gt; ao invés do &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Ficou mais claro agora?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se pensarmos um pouco, podemos chegar a conclusão de que os dois arquivos são úteis para adicionarmos os novos &lt;em&gt;paths&lt;/em&gt;, mas por que utilizar dois arquivos?&lt;/p&gt;

&lt;p&gt;Sendo assim, recomendo que registre os novos &lt;em&gt;paths&lt;/em&gt; no arquivo &lt;code&gt;~/.bash_profile&lt;/code&gt; e exponha o mesmo através do &lt;code&gt;source&lt;/code&gt; no arquivo &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; entenda mais sobre o &lt;code&gt;source&lt;/code&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Source_%28command%29&quot;&gt;aqui (em inglês)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h3 id=&quot;E-como-faremos-isso-&quot;&gt;
                &lt;a name=&quot;E-como-faremos-isso-&quot; href=&quot;#E-como-faremos-isso-&quot;&gt;&lt;/a&gt;E como faremos isso?
              &lt;/h3&gt;
            
&lt;p&gt;Confira abaixo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# arquivo .bashrc&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;$PS1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# arquivo .bash_profile&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# paths&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:~/seu/caminho:~/outro/caminho
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# aliases&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;la&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ls -la&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# functions&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; apepath &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&amp;quot;${!1}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$2&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${!1}:$2&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h4 id=&quot;A-título-de-conhecimento&quot;&gt;
                &lt;a name=&quot;A-título-de-conhecimento&quot; href=&quot;#A-título-de-conhecimento&quot;&gt;&lt;/a&gt;A título de conhecimento
              &lt;/h4&gt;
            
&lt;p&gt;Perceba que temos um &lt;code&gt;[ -n &amp;quot;$PS1&amp;quot; ] &amp;amp;&amp;amp;&lt;/code&gt; antes do &lt;code&gt;source&lt;/code&gt;. Você deve estar se pergunta o que é isso. Pois bem. Este trecho do código retorna o prompt do terminal em formato &lt;em&gt;string&lt;/em&gt;. Por exemplo, no meu terminal, é renderizado:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;vitorbritto at ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ao digitar &lt;code&gt;echo $PS1&lt;/code&gt;, será retornado:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;\[\033]0;\w\007\]\n\[\]\u\[\] at \[\]\w$(prompt_git)\n\[\]$ \[\]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Já o operador &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; é utlizado para combinar dois ou mais comandos em uma linha compacta no Unix.&lt;/p&gt;

&lt;p&gt;Perceba também que, além dos &lt;em&gt;paths&lt;/em&gt;, estamos registrando os nossos atalhos (&lt;em&gt;aliases&lt;/em&gt;), funções bash, configurações do prompt e demais recursos que pretendemos utilizar no terminal, no &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Dando-uma-mãozinha&quot;&gt;
                &lt;a name=&quot;Dando-uma-mãozinha&quot; href=&quot;#Dando-uma-mãozinha&quot;&gt;&lt;/a&gt;Dando uma mãozinha
              &lt;/h3&gt;
            
&lt;p&gt;Podemos usar funções para facilitar a inclusão de novos caminhos (&lt;em&gt;paths&lt;/em&gt;) na variável global PATH.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# append para novo caminho&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;apepath&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&amp;quot;${!1}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$2&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${!1}:$2&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# prepend para novo caminho&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;prepath&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&amp;quot;${!1}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$2&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-13&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;a name=&quot;line-14&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$2:${!1}&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-15&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;a name=&quot;line-16&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-17&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;# Executamos as funções da seguinte forma:&lt;/span&gt;
&lt;a name=&quot;line-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apepath PATH &lt;span class=&quot;s2&quot;&gt;&amp;quot;/seu/novo/caminho/aqui&amp;quot;&lt;/span&gt;
&lt;a name=&quot;line-19&quot;&gt;&lt;/a&gt;OU
&lt;a name=&quot;line-20&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;prepath PATH &lt;span class=&quot;s2&quot;&gt;&amp;quot;/seu/novo/caminho/aqui&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Você pode conferir um exemplo mais completo sobre como trabalho e configuro o meu shell, &lt;a href=&quot;https://github.com/vitorbritto/forcefiles&quot;&gt;neste repositório&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Até a próxima! :)&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jul 2014 00:00:00 -0300</pubDate>
        <link>http://www.vitorbritto.com.br/blog/adicionando-caminhos-na-variavel-de-ambiente-PATH/</link>
        <guid isPermaLink="true">http://www.vitorbritto.com.br/blog/adicionando-caminhos-na-variavel-de-ambiente-PATH/</guid>
      </item>
    
  </channel>
</rss>
